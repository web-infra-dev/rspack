name: Reusable Release

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      runner: # Runner labels
        required: true
        type: string
      test-runner: # Test Runner labels
        required: false
        type: string
      profile: # Rust profile, "ci" or "production" or "profiling"
        default: "ci"
        required: false
        type: string
      test: # Run tests?
        type: boolean
        required: false
        default: false
      bench: # Run benchmarks?
        type: boolean
        required: false
        default: false
      ref: # Git reference to checkout
        required: false
        type: string
      prefer_docker:
        required: false
        default: true
        type: boolean
        description: "Prefer to building in docker if supported"

permissions:
  # Allow commenting on issues
  issues: write

jobs:
  build:
    uses: ./.github/workflows/reusable-build-build.yml
    with:
      target: ${{ inputs.target }}
      runner: ${{ inputs.runner }}
      profile: ${{ inputs.profile }}
      ref: ${{ inputs.ref }}
      prefer_docker: ${{ inputs.prefer_docker }}
  test:
    if: inputs.test
    needs: build
    uses: ./.github/workflows/reusable-build-test.yml
    with:
      target: ${{ inputs.target }}
      runner: ${{ inputs.test-runner || inputs.runner }}
      ref: ${{ inputs.ref }}
  bench:
<<<<<<< HEAD
    uses: ./.github/workflows/reusable-build-bench.yml
    if: inputs.bench
    with:
      target: ${{ inputs.target }}
      runner: '"ubuntu-22.04"'
      ref: ${{ inputs.ref }}
=======
    name: Bench
    if: ${{ inputs.bench && !inputs.skipable }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ inputs.ref }}
          clean: ${{ runner.environment == 'github-hosted' }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-if: ${{ github.ref_name == 'main' }} # This should be safe because we have nightly building the cache every day
          key: build-bench-${{ inputs.target }}-${{ inputs.profile }}

      - name: Install cargo-codspeed binary
        uses: taiki-e/install-action@5651179950649c44da31d346537e20c0534f0f25 # v2
        with:
          tool: cargo-codspeed@2.7.2

      - name: Build Benchmark
        env:
          RUSTFLAGS: "-C debuginfo=1 -C strip=none -g --cfg codspeed"
        run: cargo codspeed build -p rspack_benchmark --features codspeed

      - name: Wait for build job
        uses: lewagon/wait-on-check-action@ccfb013c15c8afb7bf2b7c028fb74dc5a068cccc # v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-name: "Test Linux / Build"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Download bindings
        uses: ./.github/actions/artifact/download
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Show restored binding
        shell: bash
        run: ls -lah crates/node_binding/*.node

      - name: Pnpm Setup
        uses: ./.github/actions/pnpm/setup

      - name: Pnpm Install
        uses: ./.github/actions/pnpm/install-dependencies

      - name: Build JS
        run: pnpm run build:js
        
      - name: Run benchmark
        uses: CodSpeedHQ/action@0010eb0ca6e89b80c88e8edaaa07cfe5f3e6664d # v3
        timeout-minutes: 30
        with:
          run: pnpm run bench:ci
          token: ${{ secrets.CODSPEED_TOKEN }}
>>>>>>> 130203d84 (chore: verbose)
