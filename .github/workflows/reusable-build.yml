name: Reusable Release

# Example job:
# jobs:
#   build:
#     name: Release
#     strategy:
#       matrix:
#         target:
#           - x86_64-unknown-linux-gnu
#           - aarch64-unknown-linux-gnu
#           - x86_64-unknown-linux-musl
#           - aarch64-unknown-linux-musl
#           - i686-pc-windows-msvc
#           - x86_64-pc-windows-msvc
#           - aarch64-pc-windows-msvc
#           - x86_64-apple-darwin
#           - aarch64-apple-darwin
#     uses: ./.github/workflows/reusable-build.yml
#     with:
#       target: ${{ matrix.target }}

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      profile: # Rust profile, "debug" or "release"
        default: "release"
        required: false
        type: string
      test: # Run tests?
        type: boolean
        required: false
        default: true
      ref: # Git reference to checkout
        required: false
        type: string

jobs:
  build:
    name: Build
    runs-on: ${{ contains(inputs.target, 'linux') && fromJSON(vars.LINUX_RUNNER_LABELS || '"ubuntu-latest"') || contains(inputs.target, 'windows') && fromJSON(vars.WINDOWS_RUNNER_LABELS || '"windows-latest"') || contains(inputs.target, 'apple') && fromJSON(vars.MACOS_RUNNER_LABELS || '"macos-latest"') }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      - name: free-disk-cache
        if: ${{ startsWith(runner.name, 'GitHub Actions') && contains(inputs.target, 'linux') }}
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          # just remove android sdk seems enough for use, save us some time
          android: true
          dotnet: false
          haskell: false
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache
        with:
          save-if: ${{ github.ref_name == 'main' }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-cache: ${{ github.ref_name == 'main' }} # This should be safe because we have nightly building the cache every day
          shared-key: build-${{ inputs.target }}

      # Compile dependencies with optimization to make tests run faster
      - name: Add optimization to debug profile
        if: inputs.profile == 'debug'
        shell: bash
        run: |
          echo '[profile.dev.package."*"]' >> Cargo.toml
          echo 'opt-level = 3' >> Cargo.toml
          echo 'codegen-units = 1' >> Cargo.toml

      # Linux

      - name: Build x86_64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-build
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          target: ${{ inputs.target }}
          profile: ${{ inputs.profile }}
          pre: unset CC_x86_64_unknown_linux_gnu && unset CC # for jemallocator to compile
          options: -v $HOME/.cargo:/usr/local/cargo -v $HOME/.rustup:/usr/local/rustup

      - name: Build aarch64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          profile: ${{ inputs.profile }}
          pre: export JEMALLOC_SYS_WITH_LG_PAGE=16 && export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc # for jemallocator to compile

      - name: Build x86_64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}

      - name: Build aarch64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}
          pre: |
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc

      # setup rust target for windows and macos
      - name: Setup Rust Target
        if: ${{ !contains(inputs.target, 'linux') }}
        run: rustup target add ${{ inputs.target }}

      # Windows

      - name: Build i686-pc-windows-msvc
        if: ${{ inputs.target == 'i686-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build x86_64-pc-windows-msvc
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build aarch64-pc-windows-msvc
        if: ${{ inputs.target == 'aarch64-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      # Mac
      - name: Build x86_64-apple-darwin
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        run: |
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build aarch64-apple-darwin
        if: ${{ inputs.target == 'aarch64-apple-darwin' }}
        run: |
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/*.node
          if-no-files-found: error

  e2e:
    name: E2E Testing
    needs: build
    if: inputs.target == 'x86_64-unknown-linux-gnu' && inputs.test
    runs-on: ${{ fromJSON(vars.LINUX_RUNNER_LABELS || '"ubuntu-latest"') }}
    container:
      image: mcr.microsoft.com/playwright:v1.35.0-jammy
    steps:
      - uses: actions/checkout@v3

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: 16

      - name: Run e2e
        shell: bash
        run: |
          pnpm run build:js
          pnpm run test:e2e

  test:
    needs: build
    if: inputs.test
    runs-on: ${{ contains(inputs.target, 'linux') && fromJSON(vars.LINUX_RUNNER_LABELS || '"ubuntu-latest"') || contains(inputs.target, 'windows') && fromJSON(vars.WINDOWS_RUNNER_LABELS || '"windows-latest"') || contains(inputs.target, 'apple') && fromJSON(vars.MACOS_RUNNER_LABELS || '"macos-latest"') }}
    timeout-minutes: 30
    strategy:
      fail-fast: false # Build and test everything so we can look at all the errors
      matrix:
        node: [14, 16, 18]
    name: Test Node ${{ matrix.node }}
    env:
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
      PUPPETEER_SKIP_DOWNLOAD: true
    steps:
      - uses: actions/checkout@v3

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Show restored binding
        shell: bash
        run: ls -lah crates/node_binding/*.node

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: ${{ matrix.node }}

      ### x86_64-unknown-linux-gnu

      - name: Test x86_64-unknown-linux-gnu
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        run: pnpm run test:ci

      ### x86_64-apple-darwin

      - name: Test x86_64-apple-darwin
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        run: pnpm run test:ci

      ### x86_64-pc-windows-msvc

      - name: Test x86_64-pc-windows-msvc
        timeout-minutes: 20 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc'  &&  matrix.node  != '14' }}
        run: pnpm run test:ci

      ### write the latest metric into branch gh-pages
      ### Note that, We can't merge this script, because this script only runs on main branch
      - name: Update main branch test compatibility metric
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && github.ref_name == 'main' && matrix.node == '18' }}
        run: node ./webpack-test/scripts/generate.js ${{ secrets.GITHUB_TOKEN }} ${{ github.sha }}

      # ### update metric diff against main branch when pull request change
      - name: Update
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'pull_request' && matrix.node == '18' }}
        uses: ./.github/actions/webpack-test-metric-diff
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.sha }}
