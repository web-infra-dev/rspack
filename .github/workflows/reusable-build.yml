name: Reusable Release

# Example job:
# jobs:
#   build:
#     name: Release
#     strategy:
#       matrix:
#         target:
#           - x86_64-unknown-linux-gnu
#           - aarch64-unknown-linux-gnu
#           - x86_64-unknown-linux-musl
#           - aarch64-unknown-linux-musl
#           - i686-pc-windows-msvc
#           - x86_64-pc-windows-msvc
#           - aarch64-pc-windows-msvc
#           - x86_64-apple-darwin
#           - aarch64-apple-darwin
#     uses: ./.github/workflows/reusable-build.yml
#     with:
#       target: ${{ matrix.target }}

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string

jobs:
  select:
    name: Select Host
    runs-on: ubuntu-latest
    outputs:
      host: ${{ steps.run.outputs.host }}
    steps:
      - name: Choose Target for ${{ inputs.target }}
        id: run
        shell: bash
        run: |
          if [[ "${{ contains(inputs.target, 'linux') }}" == "true" ]]; then
            echo "host=ubuntu-latest" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ contains(inputs.target, 'windows') }}" == "true" ]]; then
            echo "host=windows-latest" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ contains(inputs.target, 'apple') }}" == "true" ]]; then
            echo "host=macos-latest" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build
    needs: select
    runs-on: ${{ needs.select.outputs.host }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache
        with:
          save-if: ${{ github.ref_name == 'main' }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-cache: ${{ github.ref_name == 'main' }} # This should be safe because we have nightly building the cache every day
          shared-key: build-${{ inputs.target }}

      - name: Setup Rust Target
        run: rustup target add ${{ inputs.target }}

      # Linux

      - name: Build x86_64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-build
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          target: ${{ inputs.target }}
          pre: unset CC_x86_64_unknown_linux_gnu && unset CC # for jemallocator to compile

      - name: Build aarch64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          pre: export JEMALLOC_SYS_WITH_LG_PAGE=16 && export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc # for jemallocator to compile

      - name: Build x86_64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

      - name: Build aarch64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-musl' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          pre: |
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc

      # Windows

      - name: Build i686-pc-windows-msvc
        if: ${{ inputs.target == 'i686-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:release

      - name: Build x86_64-pc-windows-msvc
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:release

      - name: Build aarch64-pc-windows-msvc
        if: ${{ inputs.target == 'aarch64-pc-windows-msvc' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:release

      # Mac
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(inputs.target, 'apple') }}
        with:
          version: 0.10.1

      - name: Build x86_64-apple-darwin
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        run: |
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:release

      - name: Build aarch64-apple-darwin
        if: ${{ inputs.target == 'aarch64-apple-darwin' }}
        run: |
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:release

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/*.node
          if-no-files-found: error

  e2e:
    name: E2E Testing
    needs: [select, build]
    if: inputs.target == 'x86_64-unknown-linux-gnu'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.33.0-jammy
    steps:
      - uses: actions/checkout@v3

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: 16

      - name: Run e2e
        shell: bash
        run: |
          pnpm run build:js
          pnpm run test:e2e

  test:
    needs: [select, build]
    runs-on: ${{ needs.select.outputs.host }}
    timeout-minutes: 30
    strategy:
      fail-fast: false # Build and test everything so we can look at all the errors
      matrix:
        node: [14, 16, 18]
    name: Test Node ${{ matrix.node }}
    env:
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
      PUPPETEER_SKIP_DOWNLOAD: true
    steps:
      - uses: actions/checkout@v3

      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/

      - name: Show restored binding
        shell: bash
        run: ls -lah crates/node_binding/*.node

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: ${{ matrix.node }}

      ### x86_64-unknown-linux-gnu

      - name: Test x86_64-unknown-linux-gnu
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        run: pnpm run test:ci

      ### x86_64-apple-darwin

      - name: Test x86_64-apple-darwin
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        run: pnpm run test:ci

      ### x86_64-pc-windows-msvc

      - name: Test x86_64-pc-windows-msvc
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc' }}
        run: pnpm run test:ci

      ### write the latest metric into branch gh-pages
      ### Note that, We can't merge this script, because this script only runs on main branch
      - name: Update main branch test compatibility metric
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && github.ref_name == 'main' && matrix.node == '18' }}
        run: node ./webpack-test/scripts/generate.js ${{ secrets.GITHUB_TOKEN }} ${{ github.sha }}

      # ### update metric diff against main branch when pull request change
      - name: Update
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'pull_request' && matrix.node == '18' }}
        uses: ./.github/actions/webpack-test-metric-diff
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.sha }}
