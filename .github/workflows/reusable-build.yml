name: Reusable Release

# Example job:
#jobs
#  build:
#    strategy:
#      matrix:
#        array:
#          - target: x86_64-unknown-linux-gnu
#            runner: ubuntu-latest
#          - target: aarch64-unknown-linux-gnu
#            runner: ubuntu-latest
#          - target: x86_64-unknown-linux-musl
#            runner: ubuntu-latest
#          - target: aarch64-unknown-linux-musl
#            runner: ubuntu-latest
#          - target: i686-pc-windows-msvc
#            runner: windows-latest
#          - target: x86_64-pc-windows-msvc
#            runner: windows-latest
#          - target: aarch64-pc-windows-msvc
#            runner: windows-latest
#          - target: x86_64-apple-darwin
#            runner: macos-latest
#          - target: aarch64-apple-darwin
#            runner: macos-latest
#    uses: ./.github/workflows/reusable-build.yml
#    with:
#      target: ${{ matrix.array.target }}
#      runner: ${{ matrix.array.runner }}

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      runner: # Runner labels
        required: true
        type: string
      profile: # Rust profile, "debug" or "release"
        default: "release"
        required: false
        type: string
      test: # Run tests?
        type: boolean
        required: false
        default: true
      test-diff: # Run Diff Test
        type: boolean
        required: false
        default: false
      ref: # Git reference to checkout
        required: false
        type: string

jobs:
  build:
    name: Build
    runs-on: ${{ fromJSON(inputs.runner) }}
    defaults:
      run:
        shell: bash
    outputs:
      runner-labels: ${{ steps.upload-artifact.outputs.runner-labels || inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache
        with:
          save-if: ${{ github.ref_name == 'main' }}

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-cache: ${{ github.ref_name == 'main' }} # This should be safe because we have nightly building the cache every day
          shared-key: build-${{ inputs.target }}

      # Compile dependencies with optimization to make tests run faster
      - name: Add optimization to debug profile
        if: inputs.profile == 'debug'
        shell: bash
        run: |
          echo '[profile.release.package."*"]' >> Cargo.toml
          echo 'opt-level = 3' >> Cargo.toml
          echo 'codegen-units = 64' >> Cargo.toml
          echo 'incremental = false' >> Cargo.toml

      - name: Check local cache
        id: check_cache
        if: ${{ inputs.profile == 'debug' && !startsWith(runner.name, 'GitHub Actions') }}
        shell: bash
        run: |
          set -e
          cache_dir=$HOME/.cache/runner/${{ github.repository_id }}-${{ github.sha }}-bindings-${{ inputs.target }}
          if [[ -d "$cache_dir" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Linux
      - name: Build x86_64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && steps.check_cache.outputs.exists != 'true' }}
        uses: ./.github/actions/docker-build
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          target: ${{ inputs.target }}
          profile: ${{ inputs.profile }}
          pre: unset CC_x86_64_unknown_linux_gnu && unset CC # for jemallocator to compile
          options: -v $HOME/.cargo:/usr/local/cargo -v $HOME/.rustup:/usr/local/rustup

      - name: Build aarch64-unknown-linux-gnu in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-gnu' && steps.check_cache.outputs.files_exists != 'true' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          profile: ${{ inputs.profile }}
          pre: export JEMALLOC_SYS_WITH_LG_PAGE=16 && export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc # for jemallocator to compile

      - name: Build x86_64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'x86_64-unknown-linux-musl' && steps.check_cache.outputs.files_exists != 'true' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}

      - name: Build aarch64-unknown-linux-musl in Docker
        if: ${{ inputs.target == 'aarch64-unknown-linux-musl' && steps.check_cache.outputs.files_exists != 'true' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}
          pre: |
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc

      # setup rust target for windows and macos
      - name: Setup Rust Target
        if: ${{ !contains(inputs.target, 'linux') }}
        run: rustup target add ${{ inputs.target }}

      # Windows

      - name: Build i686-pc-windows-msvc
        if: ${{ inputs.target == 'i686-pc-windows-msvc' && steps.check_cache.outputs.files_exists != 'true' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build x86_64-pc-windows-msvc
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc' && steps.check_cache.outputs.files_exists != 'true' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build aarch64-pc-windows-msvc
        if: ${{ inputs.target == 'aarch64-pc-windows-msvc' && steps.check_cache.outputs.files_exists != 'true' }}
        run: RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      # Mac
      - name: Build x86_64-apple-darwin
        if: ${{ inputs.target == 'x86_64-apple-darwin' && steps.check_cache.outputs.files_exists != 'true' }}
        run: |
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}

      - name: Build aarch64-apple-darwin
        if: ${{ inputs.target == 'aarch64-apple-darwin' && steps.check_cache.outputs.files_exists != 'true' }}
        run: |
          if [[ "${{ startsWith(runner.name, 'GitHub Actions') }}" == "true" ]]; then
            # Github runner
            sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          fi
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          RUST_TARGET=${{ inputs.target }} pnpm build:binding:${{ inputs.profile }}
      - name: Upload artifact
        id: upload-artifact
        uses: ./.github/actions/upload-artifact
        if: ${{ steps.check_cache.outputs.exists != 'true' }}
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/*.node
          try-local-cache: ${{ inputs.profile == 'debug' }}
          mv-when-local: true

  e2e:
    name: E2E Testing
    needs: build
    if: inputs.target == 'x86_64-unknown-linux-gnu' && inputs.test
    runs-on: ${{ fromJSON(needs.build.outputs.runner-labels) }}
    steps:
      - uses: actions/checkout@v4

      - name: Download bindings
        uses: ./.github/actions/download-artifact
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/
          try-local-cache: ${{ inputs.profile == 'debug' }}
          link-when-local: true

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: 20

      - name: Run e2e
        uses: ./.github/actions/docker-run
        with:
          image: mcr.microsoft.com/playwright:v1.35.0-jammy
          # .cache is required by download artifact, and mount in ./.github/actions/docker-run
          # .tool_cache is required by pnpm
          options: -v ${{ runner.tool_cache }}:$HOME/.tool_cache
          script: |
            export PATH=$HOME/.tool_cache/pnpm/node_modules/.bin:$PATH
            pnpm run build:js
            pnpm run test:e2e

  test:
    needs: build
    if: inputs.test
    runs-on: ${{ fromJSON(needs.build.outputs.runner-labels) }}
    timeout-minutes: 60
    strategy:
      fail-fast: false # Build and test everything so we can look at all the errors
      matrix:
        node: ${{ fromJSON(contains(inputs.target, 'linux') && github.ref_name == 'main' && '[16, 18, 20]' || '[18]' )}}
    name: Test Node ${{ matrix.node }}
    env:
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
      PUPPETEER_SKIP_DOWNLOAD: true
    steps:
      - uses: actions/checkout@v4

      - name: Download bindings
        uses: ./.github/actions/download-artifact
        with:
          name: bindings-${{ inputs.target }}
          path: crates/node_binding/
          try-local-cache: ${{ inputs.profile == 'debug' }}
          link-when-local: true

      - name: Show restored binding
        shell: bash
        run: ls -lah crates/node_binding/*.node

      - name: Setup Pnpm
        uses: ./.github/actions/pnpm-cache
        with:
          node-version: ${{ matrix.node }}

      ### x86_64-unknown-linux-gnu

      - name: Test x86_64-unknown-linux-gnu
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        run: pnpm run test:ci

      - name: Test diff test
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
        run: node ./scripts/test/diff.cjs

      ### x86_64-apple-darwin

      - name: Test x86_64-apple-darwin
        timeout-minutes: 15 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-apple-darwin' }}
        run: pnpm run test:ci

      ### x86_64-pc-windows-msvc

      - name: Test x86_64-pc-windows-msvc
        timeout-minutes: 20 # Tests should finish within 15 mins, please fix your tests instead of changing this to a higher timeout.
        if: ${{ inputs.target == 'x86_64-pc-windows-msvc' }}
        run: pnpm run test:ci

      - name: Diff test
        timeout-minutes: 15
        if: ${{ inputs.test-diff }}
        run: pnpm run test:diff

      ### write the latest metric into branch gh-pages
      ### Note that, We can't merge this script, because this script only runs on main branch
      - name: Update main branch test compatibility metric
        if: ${{ github.repository_owner == 'web-infra-dev' && inputs.target == 'x86_64-unknown-linux-gnu' && github.ref_name == 'main' && matrix.node == '18' }}
        run: node ./webpack-test/scripts/generate.js ${{ secrets.GITHUB_TOKEN }} ${{ github.sha }}

      # ### update metric diff against main branch when pull request change
      - name: Update
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' && github.event_name == 'pull_request' && matrix.node == '18' }}
        uses: ./.github/actions/webpack-test-metric-diff
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.sha }}
