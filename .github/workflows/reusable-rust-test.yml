name: Reusable Rust Test

on:
  workflow_call:
    inputs:
      cargo-check-strategy:
        type: string
        required: false
        default: "all"
        description: "Strategy for cargo check: all (default) or separated"

jobs:
  check-changed:
    runs-on: ubuntu-latest
    name: Check Source Changed
    outputs:
      code_changed: ${{ steps.filter.outputs.code_changed == 'true' }}
      document_changed: ${{ steps.filter.outputs.document_changed == 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          predicate-quantifier: "every"
          filters: |
            code_changed:
              - "!**/*.md"
              - "!**/*.mdx"
              - "!website/**"
            document_changed:
              - "website/**"

  rust_check:
    name: Rust check
    needs: [check-changed]
    if: ${{ needs.check-changed.outputs.code_changed == 'true' }}
    runs-on: ${{ fromJSON(vars.LINUX_SELF_HOSTED_RUNNER_LABELS ||  '"ubuntu-22.04"') }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust Toolchain (Nightly)
        uses: ./.github/actions/rustup
        with:
          save-if: true
          key: check

      - name: Install Stable Rust 1.88.0 for cargo check
        shell: bash
        run: |
          rustup toolchain install 1.88.0 -c rustc -c cargo -c rust-std

      - name: Run Cargo codegen
        run: cargo codegen

      - name: Install cargo-binstall
        if: ${{ inputs.cargo-check-strategy == 'separated' }}
        uses: cargo-bins/cargo-binstall@8aac5aa2bf0dfaa2863eccad9f43c68fe40e5ec8 # v1.14.1

      - name: Install cargo-workspaces
        if: ${{ inputs.cargo-check-strategy == 'separated' }}
        run: cargo binstall --no-confirm cargo-workspaces@0.4.0 --force

      - name: Run Cargo Check (all strategy)
        if: ${{ inputs.cargo-check-strategy == 'all' }}
        shell: bash
        run: |
          # Temporarily disable nightly flags for stable Rust cargo check
          mv .cargo/config.toml .cargo/config.toml.bak
          cat > .cargo/config.toml << 'EOF'
          # workaround for getting workspace root dir, reference: https://github.com/rust-lang/cargo/issues/3946
          [env]
          CARGO_WORKSPACE_DIR = { value = "", relative = true }

          [alias]
          lint = "clippy --workspace --all-targets -- --deny warnings"
          # AKA `test-update`, handy cargo rst update without install `cargo-rst` binary
          t  = "test --no-fail-fast"
          codegen = "xtask codegen"
          xtask = "run -p xtask --"

          [target.'cfg(all())']
          rustflags = [
            # CLIPPY LINT SETTINGS
            # This is a workaround to configure lints for the entire workspace, pending the ability to configure this via TOML.
            # See: `https://github.com/rust-lang/cargo/issues/5034`
            #      `https://github.com/EmbarkStudios/rust-ecosystem/issues/22#issuecomment-947011395`
            "-Wclippy::all", # all lints that are on by default (correctness, suspicious, style, complexity, perf)

            # restriction
            "-Wclippy::dbg_macro",
            # Disable this as semantics of `expect` and `Result` are different.
            # See: `https://github.com/web-infra-dev/rspack/pull/4848`
            # "-Wclippy::unwrap_in_result",
            "-Wclippy::unwrap_used",
            "-Wclippy::empty_drop",
            "-Wclippy::exit",
            "-Wclippy::empty_structs_with_brackets",
            "-Wclippy::rc_buffer",
            "-Wclippy::rc_mutex",
            # https://github.com/bitflags/bitflags/issues/424
            # "-Wclippy::same_name_method",

            "-Aclippy::default_constructed_unit_structs",
            "-Csymbol-mangling-version=v0", # symbol mangling v0 https://doc.rust-lang.org/stable/rustc/symbol-mangling/v0.html
          ]

          # Fix napi breaking in test environment <https://github.com/napi-rs/napi-rs/issues/1005#issuecomment-1011034770>
          # To be able to run unit tests on macOS, support compilation to 'x86_64-apple-darwin'.
          # -all_load is related to https://github.com/web-infra-dev/rspack/pull/9337
          [target.'cfg(target_vendor = "apple")']
          rustflags = ["-C", "link-args=-Wl,-undefined,dynamic_lookup,-no_fixup_chains,-all_load"]

          # To be able to run unit tests on Windows, support compilation to 'x86_64-pc-windows-msvc'.
          # Use Hybrid CRT to reduce the size of the binary (Coming by default with Windows 10 and later versions).
          [target.'cfg(target_os = "windows")']
          rustflags = [
            "-C", "link-args=/FORCE", 
            "-C", "link-args=/NODEFAULTLIB:libucrt.lib", 
            "-C", "link-args=/DEFAULTLIB:ucrt.lib"
          ]

          [target.wasm32-wasip1-threads]
          rustflags = [
            "-C",
            "target-feature=+simd128", 
            "--cfg", "tokio_unstable"
          ]

          [target.x86_64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]
          [target.i686-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]
          [target.aarch64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]

          # This must be the last line to allow ci script to append flags
          EOF
          cargo +1.88.0 check --workspace --all-targets --locked
          # Restore original config
          mv .cargo/config.toml.bak .cargo/config.toml

      - name: Run Cargo Check (separated strategy)
        if: ${{ inputs.cargo-check-strategy == 'separated' }}
        shell: bash
        run: |
          # Temporarily disable nightly flags for stable Rust cargo check
          mv .cargo/config.toml .cargo/config.toml.bak
          cat > .cargo/config.toml << 'EOF'
          # workaround for getting workspace root dir, reference: https://github.com/rust-lang/cargo/issues/3946
          [env]
          CARGO_WORKSPACE_DIR = { value = "", relative = true }

          [alias]
          lint = "clippy --workspace --all-targets -- --deny warnings"
          # AKA `test-update`, handy cargo rst update without install `cargo-rst` binary
          t  = "test --no-fail-fast"
          codegen = "xtask codegen"
          xtask = "run -p xtask --"

          [target.'cfg(all())']
          rustflags = [
            # CLIPPY LINT SETTINGS
            # This is a workaround to configure lints for the entire workspace, pending the ability to configure this via TOML.
            # See: `https://github.com/rust-lang/cargo/issues/5034`
            #      `https://github.com/EmbarkStudios/rust-ecosystem/issues/22#issuecomment-947011395`
            "-Wclippy::all", # all lints that are on by default (correctness, suspicious, style, complexity, perf)

            # restriction
            "-Wclippy::dbg_macro",
            # Disable this as semantics of `expect` and `Result` are different.
            # See: `https://github.com/web-infra-dev/rspack/pull/4848`
            # "-Wclippy::unwrap_in_result",
            "-Wclippy::unwrap_used",
            "-Wclippy::empty_drop",
            "-Wclippy::exit",
            "-Wclippy::empty_structs_with_brackets",
            "-Wclippy::rc_buffer",
            "-Wclippy::rc_mutex",
            # https://github.com/bitflags/bitflags/issues/424
            # "-Wclippy::same_name_method",

            "-Aclippy::default_constructed_unit_structs",
            "-Csymbol-mangling-version=v0", # symbol mangling v0 https://doc.rust-lang.org/stable/rustc/symbol-mangling/v0.html
          ]

          # Fix napi breaking in test environment <https://github.com/napi-rs/napi-rs/issues/1005#issuecomment-1011034770>
          # To be able to run unit tests on macOS, support compilation to 'x86_64-apple-darwin'.
          # -all_load is related to https://github.com/web-infra-dev/rspack/pull/9337
          [target.'cfg(target_vendor = "apple")']
          rustflags = ["-C", "link-args=-Wl,-undefined,dynamic_lookup,-no_fixup_chains,-all_load"]

          # To be able to run unit tests on Windows, support compilation to 'x86_64-pc-windows-msvc'.
          # Use Hybrid CRT to reduce the size of the binary (Coming by default with Windows 10 and later versions).
          [target.'cfg(target_os = "windows")']
          rustflags = [
            "-C", "link-args=/FORCE", 
            "-C", "link-args=/NODEFAULTLIB:libucrt.lib", 
            "-C", "link-args=/DEFAULTLIB:ucrt.lib"
          ]

          [target.wasm32-wasip1-threads]
          rustflags = [
            "-C",
            "target-feature=+simd128", 
            "--cfg", "tokio_unstable"
          ]

          [target.x86_64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]
          [target.i686-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]
          [target.aarch64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static"]

          # This must be the last line to allow ci script to append flags
          EOF
          cargo workspaces exec cargo +1.88.0 check --all-targets --locked
          # Restore original config
          mv .cargo/config.toml.bak .cargo/config.toml

      - name: Run Clippy
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1
        with:
          command: clippy
          args: --workspace --all-targets --tests -- -D warnings

      - name: Run rustfmt
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install tapo
        run: cargo install taplo-cli --locked
      - name: Run toml format check
        run: taplo format --check '.cargo/*.toml' './crates/**/Cargo.toml' './Cargo.toml'

  rust_unused_dependencies:
    needs: [check-changed]
    if: ${{ needs.check-changed.outputs.code_changed == 'true' }}
    name: Check Rust Dependencies
    runs-on: ${{ fromJSON(vars.LINUX_SELF_HOSTED_RUNNER_LABELS || '"ubuntu-22.04"') }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: ./.github/actions/rustup
        with:
          key: check

      - name: Run Cargo codegen
        run: cargo codegen

      - name: Install cargo-deny
        uses: taiki-e/install-action@2383334cf567d78771fc7d89b6b3802ef1412cf6 # v2
        with:
          tool: cargo-deny@0.18.3
      - name: Check licenses
        run: |
          cargo deny --all-features check license bans
          cargo xtask deny-ext

      - uses: cargo-bins/cargo-binstall@8aac5aa2bf0dfaa2863eccad9f43c68fe40e5ec8 # v1.14.1
      - run: cargo binstall --no-confirm cargo-shear@1.1.12 --force
      - run: cargo shear

  rust_test:
    name: Rust test
    runs-on: ${{ fromJSON(vars.LINUX_SELF_HOSTED_RUNNER_LABELS || '"ubuntu-22.04"') }}
    needs: [check-changed]
    if: ${{ needs.check-changed.outputs.code_changed == 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-if: true
          key: test

      - name: Run Cargo codegen
        run: cargo codegen

      # Compile test without debug info for reducing the CI cache size
      - name: Change profile.test
        shell: bash
        run: |
          echo '[profile.test]' >> Cargo.toml
          echo 'debug = false' >> Cargo.toml
      - name: Run rspack test
        run: |
          cargo test --workspace \
            --exclude rspack_binding_api \
            --exclude rspack_node \
            --exclude rspack_binding_builder \
            --exclude rspack_binding_builder_macros \
            --exclude rspack_binding_builder_testing \
            --exclude rspack_binding_build \
            --exclude rspack_napi \
            -- --nocapture

  test_required_check:
    name: Rust Test Required Check
    needs: [rust_test, rust_check, rust_unused_dependencies, check-changed]
    if: ${{ always() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Log
        run: echo ${{ join(needs.*.result, ',') }}
      - name: Test check
        if: ${{ needs.check-changed.outputs.code_changed == 'true' && join(needs.*.result, ',')!='success,success,success,success' }}
        run: echo "Tests Failed" && exit 1
      - name: No check to Run test
        run: echo "Success"
