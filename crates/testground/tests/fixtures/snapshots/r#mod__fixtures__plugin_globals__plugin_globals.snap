---
source: crates/testground/tests/fixtures/plugin_globals.rs
expression: "&bundler.bundle.context.assets.lock().unwrap().get(0).expect(\"failed to generate bundle\").source"
---
(function () {
  let modules = {};
  class Hot {
    constructor(id) {
      this.id = id;
      this.accepts = [];
    }
    accept(ids, callback) {
      if (ids === undefined) {
        this.accepts.push({
          ids: this.id,
          accept: undefined,
        });
      } else if (typeof ids === 'function') {
        this.accepts.push({
          ids: this.id,
          accept: ids,
        });
      } else {
        this.accepts.push({
          ids,
          accept: callback,
        });
      }
    }
    dispose(callback) {
      this.accepts.push({
        id: this.id,
        dispose: callback,
      });
    }
  }
  class Module {
    constructor(options) {
      this.id = options.id;
      this.factory = options.factory;
      this.loaded = options.loaded;
      this.exports = options.exports;
      this.children = new Set(); // children module
      this.parents = new Set(); //  parent module
    }
  }
  function define(id, factory) {
    const mod = modules[id];
    if (!mod) {
      modules[id] = new Module({
        factory: factory,
        loaded: false,
        exports: {},
        id,
      });
    } else {
      console.debug('repeated define for', id);
      // mod.loaded = false;
      // mod.exports = {};
      // mod.factory = factory;
    }
  }
  async function dynamic_require(module_id, chunk_id) {
    await ensure(chunk_id)
    const result = require(module_id);
    return result;
  }
  function require(id) {
    const self = this;
    let mod = modules[id];
    if (!mod) {
      throw new Error(id + ' not exits');
    }
    if (mod.loaded) {
      return mod.exports;
    }
    if (self instanceof Module) {
      this.children.add(mod);
      mod.parents.add(this);
    }
    mod.hot = new Hot(id);
    mod.loaded = true;
    mod.factory(require.bind(mod), mod, mod.exports);
    return mod.exports;
  }

  function loadStyles(url){
    return new Promise((rsl, rej) => {
      var link = document.createElement("link");
      link.rel = "stylesheet";
      link.type = "text/css";
      link.href = url;
      link.onload = rsl
      var head = document.getElementsByTagName("head")[0];
      head.appendChild(link);
    })
    
  }

  const ensurers = {
    async js(chunk_id) {
      await import('http://127.0.01:4444/' + chunk_id + '.js');
    },
    async css(chunk_id) {
      try {
        await loadStyles('http://127.0.01:4444/' + chunk_id + '.css')
      } catch (err) {
        console.log('css load fail', err)
      }
      
    }
  }

  function ensure(chunkId) {
    return Promise.all(Object.keys(ensurers).map((ensurerName) => {
      return ensurers[ensurerName](chunkId)
    }));
  }


  globalThis.rs = {
    define: define,
    require: require,
    dynamic_require: dynamic_require,
    m: modules,
  };
})();
function invalidate(dirtyId) {
  const modules = rs.m;
  rs.require(dirtyId);

  const module = modules[dirtyId];
  const hmrBoundaries = new Set(); // 所有的hmr boundary,即所有的收到冒泡影响的含有accept的模块
  const hotMetaList = new Set(); // hmrBoundary 模块关联的accept回调
  const removeModules = new Set(); // 在冒泡规则中收到影响的所有模块

  cllectModules(dirtyId);

  console.log('hmr:', hmrBoundaries, hotMetaList, removeModules);

  /**
   * 卸载所有过时的模块，等待重新触发副作用
   */
  for (const mod of removeModules.values()) {
    modules[mod].loaded = false;
  }
  /**
   * 重新执行boundary的所有模块
   */
  for (const id of hmrBoundaries.values()) {
    rs.require(id);
  }
  /**
   * 触发meta列表
   */
  for (const hot of hotMetaList.values()) {
    if (typeof hot.ids === 'string') {
      if (hot.accept) {
        const mod = modules[hot.ids];
        hot.accept(mod.exports);
      }
    } else {
      hot.accept(hot.ids.map((id) => modules[id].exports));
    }
  }
  /**
   * id: 当前模块id
   *
   */
  function cllectModules(id) {
    removeModules.add(id);
    const module = modules[id];
    /**
     * 计算自身的accept
     */
    const selfAccepts = getAccepts(id, module);
    // 如果存在自身的accept，执行自身的accept,冒泡终止
    if (selfAccepts.length > 0) {
      hmrBoundaries.add(id);
      for (const accept of selfAccepts) {
        hotMetaList.add(accept);
      }
    } else {
      // 向上冒泡
      for (const m of module.parents.values()) {
        /**
         * 断开原有的父子关系
         */
        // m.children.delete(module);
        // module.parents.delete(m);
        const childAccepts = getAccepts(id, m);
        // 如果在父模块accept了子模块，那么停止冒泡
        if (childAccepts.length > 0) {
          for (const accept of childAccepts) {
            // 子模块为boundary
            hmrBoundaries.add(module.id);
            hotMetaList.add(accept);
          }
        } else {
          cllectModules(m.id);
        }
      }
    }
  }
  /**
   * id: 当前修改的模块id
   * module: 待检查的module
   */
  function getAccepts(id, module) {
    return module.hot.accepts.filter(({ ids }) => {
      if (typeof ids === 'string') {
        return ids === id;
      } else {
        return ids.includes(id);
      }
    });
  }
}

const socketUrl = `ws://${location.host}/`;
const socket = new WebSocket(socketUrl, 'web-server');
function reload() {
  setTimeout(() => {
    window.location.reload();
  });
}
socket.onmessage = function (event) {
  const data = JSON.parse(event.data);
  (0, eval)(data.code);
  // reload();
};

rs.define("./../../globals:react", function(require, module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = void 0;
    var global = typeof globalThis !== 'undefined' ? globalThis : global || self;
    var imported = global.React;
    var _default = imported;
    exports.default = _default;
});

rs.define("./src/index.js", function(require, module, exports) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var _react = _interopRequireDefault(require("./../../globals:react"));
    _react.default.createElement("div", null, {
        children: "Hello, world!"
    });
});
rs.require("./src/index.js");

