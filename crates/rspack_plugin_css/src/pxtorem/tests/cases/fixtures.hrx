<===> should work on the readme example.css
h1 { margin: 0 0 20px; font-size: 32px; line-height: 1.2; letter-spacing: 1px; }
<===> .expected
h1 { margin: 0 0 20px; font-size: 2rem; line-height: 1.2; letter-spacing: 0.0625rem; }

<===> should replace the px unit with rem.css
.rule { font-size: 15px }
<===> .expected
.rule { font-size: 0.9375rem }

<===> should ignore non px properties.css
.rule { font-size: 2em }
<===> .expected
.rule { font-size: 2em }

<===> should ignore px in custom property names.css
:root { --rem-14px: 14px; } .rule { font-size: var(--rem-14px); }
<===> .config
{
  "propList": ["--*", "font-size"]
}
<===> .expected
:root { --rem-14px: 0.875rem; } .rule { font-size: var(--rem-14px); }

<===> should handle < 1 values and values without a leading 0.css
.rule { margin: 0.5rem .5px -0.2px -.2em }
<===> .config
{
  "propList": ["margin"]
}
<===> .expected
.rule { margin: 0.5rem 0.03125rem -0.0125rem -.2em }

<===> should not add properties that already exist.css
.rule { font-size: 16px; font-size: 1rem; }
<===> .expected
.rule { font-size: 16px; font-size: 1rem; }

<===> should remain unitless if 0.css
.rule { font-size: 0px; font-size: 0; }
<===> .expected
.rule { font-size: 0px; font-size: 0; }

<===> should not replace values in double quotes or single quotes.css
.rule { content: '16px'; font-family: "16px"; font-size: 16px; }
<===> .config
{
  "propList": ["*"]
}
<===> .expected
.rule { content: '16px'; font-family: "16px"; font-size: 1rem; }

<===> should not replace values in `url()`.css
.rule { background: url(16px.jpg); font-size: 16px; }
<===> .config
{
  "propList": ["*"]
}
<===> .expected
.rule { background: url(16px.jpg); font-size: 1rem; }

<===> should not replace values with an uppercase P or X.css
.rule { margin: 12px calc(100% - 14PX); height: calc(100% - 20px); font-size: 12Px; line-height: 16px; }
<===> .config
{
  "propList": ["*"]
}
<===> .expected
.rule { margin: 0.75rem calc(100% - 14PX); height: calc(100% - 1.25rem); font-size: 12Px; line-height: 1rem; }

<===> should replace using a root value of 10.css
.rule { font-size: 1.5rem }
<===> .config
{
  "rootValue": 10
}
<===> .expected
.rule { font-size: 1.5rem }

<===> -should replace using different root values with different files.css
ignored, since we don't want to support function configuration

<===> should replace using a decimal of 2 places.css
.rule { font-size: 15px }
<===> .config
{
  "unitPrecision": 2
}
<===> .expected
.rule { font-size: 0.94rem }

<===> should only replace properties in the prop list.css
.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }
<===> .config
{
  "propList": ["*font*", "margin*", "!margin-left", "*-right", "pad"]
}
<===> .expected
.rule { font-size: 1rem; margin: 1rem; margin-left: 5px; padding: 5px; padding-right: 1rem }

<===> should only replace properties in the prop list with wildcard.css
.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }
<===> .config
{
  "propList": ["*", "!margin-left", "!*padding*", "!font*"]
}
<===> .expected
.rule { font-size: 16px; margin: 1rem; margin-left: 5px; padding: 5px; padding-right: 16px }

<===> should replace all properties when white list is empty.css
.rule { margin: 16px; font-size: 15px }
<===> .config
{
  "propList": []
}
<===> .expected
.rule { margin: 1rem; font-size: 0.9375rem }

<===> should ignore selectors in the selector black list.css
.rule { font-size: 15px } .rule2 { font-size: 15px }
<===> .config
{
  "selectorBlackList": [".rule2"]
}
<===> .expected
.rule { font-size: 0.9375rem } .rule2 { font-size: 15px }

<===> should ignore every selector with `body$`.css
body { font-size: 16px; } .class-body$ { font-size: 16px; } .simple-class { font-size: 16px; }
<===> .config
{
  "selectorBlackList": ["body$"]
}
<===> .expected
body { font-size: 1rem; } .class-body$ { font-size: 16px; } .simple-class { font-size: 1rem; }

<===> -should only ignore exactly `body`.css,(ignore regex for now)
body { font-size: 16px; } .class-body { font-size: 16px; } .simple-class { font-size: 16px; 
<===> .config
{
  "selectorBlackList": ["/^body$/""]
}

<===> should leave fallback pixel unit with root em value.css
.rule { font-size: 15px }
<===> .config
{
  "replace": false
}
<===> .expected
.rule { font-size: 15px; font-size: 0.9375rem }

<===> should leave fallback pixel unit with root em value2.css
.rule {
  font-size: 15px;
  margin: 20px;
  font: 16px;
}
<===> .config
{
  "replace": false
}
<===> .expected
.rule {
  font-size: 15px;
  font-size: 0.9375rem;
  margin: 20px;
  font: 16px;
  font: 1rem;
}


<===> should replace px in media queries.css
@media (min-width: 500px) { .rule { font-size: 16px } }
<===> .config
{
  "mediaQuery": true
}
<===> .expected
@media (min-width: 31.25rem) { .rule { font-size: 1rem } }

<===> should not replace px in media queries.css
@media (min-width: 500px) { .rule { font-size: 16px } }
<===> .expected
@media (min-width: 500px) { .rule { font-size: 16px } }


<===> should not replace values below minPixelValue.css
.rule { border: 1px solid #000; font-size: 16px; margin: 1px 10px; }
<===> .config
{
  "propList": [],
  "minPixelValue": 2
}
<===> .expected
.rule { border: 1px solid #000; font-size: 1rem; margin: 1px 0.625rem; }

<===> should replace 0px to 0.css
.test {
  width: 0px;
}
<===> .config
{
  "propList": ["*"]
}
<===> .expected
.test {
  width: 0;
}

<===> should replace 0px to 0 (preserved-token).css
.translate-x-0 {
  --tw-translate-x: 0px;
}
<===> .config
{
  "propList": ["*"]
}
<===> .expected
.translate-x-0 {
  --tw-translate-x: 0;
}