use rspack_core::{
  property_access, AsContextDependency, AsModuleDependency, Dependency, DependencyCategory,
  DependencyId, DependencyTemplate, DependencyType, ExportsOfExportsSpec, ExportsSpec, ModuleGraph,
  RuntimeGlobals, TemplateContext, TemplateReplaceSource, UsedName,
};
use swc_core::atoms::Atom;

use super::ExportsBase;

#[allow(unused)]
#[derive(Debug, Clone)]
pub struct CommonJsExportRequireDependency {
  id: DependencyId,
  range: (u32, u32),
  base: ExportsBase,
  names: Vec<Atom>,
  ids: Vec<Atom>,
  require_dep: Option<DependencyId>,
}

impl CommonJsExportRequireDependency {
  pub fn new(
    range: (u32, u32),
    base: ExportsBase,
    names: Vec<Atom>,
    require_dep: Option<DependencyId>,
  ) -> Self {
    Self {
      id: DependencyId::new(),
      range,
      base,
      names,
      // TODO: bailout rest opt for now
      ids: vec![],
      require_dep,
    }
  }
}

impl Dependency for CommonJsExportRequireDependency {
  fn dependency_debug_name(&self) -> &'static str {
    "CommonJsExportRequireDependency"
  }

  fn id(&self) -> &DependencyId {
    &self.id
  }

  fn category(&self) -> &DependencyCategory {
    &DependencyCategory::CommonJS
  }

  fn dependency_type(&self) -> &DependencyType {
    &DependencyType::CjsExportRequire
  }

  fn get_exports(&self, mg: &ModuleGraph) -> Option<ExportsSpec> {
    let related_require_dep = self.require_dep?;
    let con = mg.connection_by_dependency(&related_require_dep)?;
    Some(ExportsSpec {
      exports: ExportsOfExportsSpec::True,
      can_mangle: Some(false),
      from: if self.ids.is_empty() {
        Some(*con)
      } else {
        None
      },
      dependencies: Some(vec![con.module_identifier]),
      ..Default::default()
    })
  }
}

impl DependencyTemplate for CommonJsExportRequireDependency {
  fn apply(
    &self,
    source: &mut TemplateReplaceSource,
    code_generatable_context: &mut TemplateContext,
  ) {
    let TemplateContext {
      compilation,
      module,
      runtime,
      runtime_requirements,
      ..
    } = code_generatable_context;

    let module = compilation
      .module_graph
      .module_by_identifier(&module.identifier())
      .expect("should have mgm");

    let exports_argument = module.get_exports_argument();
    let module_argument = module.get_module_argument();

    let base = if self.base.is_exports() {
      runtime_requirements.insert(RuntimeGlobals::EXPORTS);
      exports_argument.to_string()
    } else if self.base.is_module_exports() {
      runtime_requirements.insert(RuntimeGlobals::MODULE);
      format!("{}.exports", module_argument)
    } else if self.base.is_this() {
      runtime_requirements.insert(RuntimeGlobals::THIS_AS_EXPORTS);
      "this".to_string()
    } else {
      unreachable!()
    };

    let used = compilation
      .module_graph
      .get_exports_info(&module.identifier())
      .id
      .get_used_name(
        &compilation.module_graph,
        *runtime,
        UsedName::Vec(self.names.clone()),
      );

    // TODO: different with webpack
    // Rspack do not have parser hook, so scanner will generate CommonJsRequireDependency first.
    // Then require expr will be generated by CommonJsRequireDependency, only left value will be replaced
    if self.base.is_expression() {
      let expr = match used {
        Some(used) => format!(
          "{}{}",
          base,
          property_access(
            match used {
              UsedName::Str(name) => vec![name].into_iter(),
              UsedName::Vec(names) => names.into_iter(),
            },
            0
          )
        ),
        None => "/* unused reexport */ ".to_string(),
      };
      source.replace(self.range.0, self.range.1, expr.as_str(), None)
    } else if self.base.is_define_property() {
      panic!("TODO")
    } else {
      panic!("Unexpected type");
    }
  }
}

impl AsModuleDependency for CommonJsExportRequireDependency {}
impl AsContextDependency for CommonJsExportRequireDependency {}
