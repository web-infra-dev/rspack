---
source: crates/rspack_testing/src/run_fixture.rs
---
```js title=main.js
(self['webpackChunkwebpack'] = self['webpackChunkwebpack'] || []).push([["main"], {
"./index.js": function (__unused_webpack_module, exports, __webpack_require__) {
(async function() {
    return __webpack_require__.el(/* ./module */"./module.js").then(__webpack_require__.bind(__webpack_require__, /* ./module */"./module.js")).then(function(mod) {
        if (mod.result !== 42) throw new Error('panic');
    });
})();
},

},function(__webpack_require__) {
var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId) }
var __webpack_exports__ = (__webpack_exec__("./index.js"));

}
]);
```
```js title=module_js.js
(self['webpackChunkwebpack'] = self['webpackChunkwebpack'] || []).push([["module_js"], {
"./module.js": function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
'use strict';
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  'result': function() { return result; },
  'getNumber': function() { return getNumber; }
});
/* harmony import */var _wasm_wasm__WEBPACK_IMPORTED_MODULE_0_ = __webpack_require__(/* ./wasm.wasm */"./wasm.wasm");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_wasm_wasm__WEBPACK_IMPORTED_MODULE_0_]);
([_wasm_wasm__WEBPACK_IMPORTED_MODULE_0_] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
 var result = (0, _wasm_wasm__WEBPACK_IMPORTED_MODULE_0_.getResult)(1);
 function getNumber() {
    return 20;
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });},
"./module2.js": function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
'use strict';
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  'getNumber': function() { return getNumber; }
});
/* harmony import */var _wasm_wasm__WEBPACK_IMPORTED_MODULE_0_ = __webpack_require__(/* ./wasm.wasm */"./wasm.wasm");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_wasm_wasm__WEBPACK_IMPORTED_MODULE_0_]);
([_wasm_wasm__WEBPACK_IMPORTED_MODULE_0_] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
 function getNumber() {
    return (0, _wasm_wasm__WEBPACK_IMPORTED_MODULE_0_.getNumber)();
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });},
"./wasm.wasm": function (module, exports, __webpack_require__) {
var __webpack_instantiate__ = function ([WEBPACK_IMPORTED_MODULE_0, WEBPACK_IMPORTED_MODULE_1]) {
return __webpack_require__.v(exports, module.id, "1bcb32989c290fbc.module.wasm" , {
"./module": {
"getNumber": WEBPACK_IMPORTED_MODULE_0["getNumber"]
},
"./module2": {
"getNumber": WEBPACK_IMPORTED_MODULE_1["getNumber"]
}
});
}
__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) {
  try {
    var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__("./module.js");
var WEBPACK_IMPORTED_MODULE_1 = __webpack_require__("./module2.js");

    var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([WEBPACK_IMPORTED_MODULE_0, WEBPACK_IMPORTED_MODULE_1]);
    var [WEBPACK_IMPORTED_MODULE_0, WEBPACK_IMPORTED_MODULE_1] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__;
    await __webpack_require__.v(exports, module.id, "1bcb32989c290fbc.module.wasm" , {
"./module": {
"getNumber": WEBPACK_IMPORTED_MODULE_0["getNumber"]
},
"./module2": {
"getNumber": WEBPACK_IMPORTED_MODULE_1["getNumber"]
}
});

  __webpack_async_result__();

  } catch(e) { __webpack_async_result__(e); }
}, 1);
},

}]);
```
```js title=runtime.js
(function() {
var __webpack_modules__ = {

}
// The module cache
 var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
// Check if module is in cache
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== undefined) {
      return cachedModule.exports;
      }
      // Create a new module (and put it into the cache)
      var module = (__webpack_module_cache__[moduleId] = {
      id: moduleId,
 exports: {}
      });
      // Execute the module function
      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
// Return the exports of the module
 return module.exports;

}
// expose the modules object (__webpack_modules__)
 __webpack_require__.m = __webpack_modules__;
// webpack/runtime/load_chunk_with_module
(function() {
var map = {"./module.js": ["module_js",],};

__webpack_require__.el = function(module) {
  var chunkId = map[module];
  if (chunkId === undefined) {
      return Promise.resolve();
  }
  if (chunkId.length > 1) {
    return Promise.all(chunkId.map(__webpack_require__.e));
  } else {
    return __webpack_require__.e(chunkId[0]);
  };
}

})();
// webpack/runtime/ensure_chunk
(function() {
__webpack_require__.f = {};
// This file contains only the entry chunk.
// The chunk loading function for additional chunks
__webpack_require__.e = function (chunkId) {
	return Promise.all(
		Object.keys(__webpack_require__.f).reduce(function (promises, key) {
			__webpack_require__.f[key](chunkId, promises);
			return promises;
		}, [])
	);
};

})();
// webpack/runtime/public_path
(function() {
__webpack_require__.p = "/";

})();
// webpack/runtime/get_chunk_filename/__webpack_require__.u
(function() {
// This function allow to reference chunks
        __webpack_require__.u = function (chunkId) {
          // return url for filenames based on template
          return {"module_js": "module_js.js",}[chunkId];
        };
      
})();
// webpack/runtime/get_chunk_filename/__webpack_require__.k
(function() {
// This function allow to reference chunks
        __webpack_require__.k = function (chunkId) {
          // return url for filenames based on template
          return {"module_js": "module_js.css",}[chunkId];
        };
      
})();
// webpack/runtime/load_script
(function() {
var inProgress = {};

// var dataWebpackPrefix = "webpack:";
// loadScript function to load a script via script tag
__webpack_require__.l = function loadScript(url, done, key, chunkId) {
	if (inProgress[url]) {
		inProgress[url].push(done);
		return;
	}
	var script, needAttach;
	if (key !== undefined) {
		var scripts = document.getElementsByTagName("script");
		for (var i = 0; i < scripts.length; i++) {
			var s = scripts[i];
			if (
				s.getAttribute("src") == url
				// || s.getAttribute("data-webpack") == dataWebpackPrefix + key
			) {
				script = s;
				break;
			}
		}
	}
	if (!script) {
		needAttach = true;
		script = document.createElement("script");

		script.charset = "utf-8";
		script.timeout = 120;
		// script.setAttribute("data-webpack", dataWebpackPrefix + key);
		script.src = url;

		if (false && script.src.indexOf(window.location.origin + '/') !== 0) {
			script.crossOrigin = false;
		}
	}
	inProgress[url] = [done];
	var onScriptComplete = function (prev, event) {
		script.onerror = script.onload = null;
		clearTimeout(timeout);
		var doneFns = inProgress[url];
		delete inProgress[url];
		script.parentNode && script.parentNode.removeChild(script);
		doneFns &&
			doneFns.forEach(function (fn) {
				return fn(event);
			});
		if (prev) return prev(event);
	};
	var timeout = setTimeout(
		onScriptComplete.bind(null, undefined, {
			type: "timeout",
			target: script
		}),
		120000
	);
	script.onerror = onScriptComplete.bind(null, script.onerror);
	script.onload = onScriptComplete.bind(null, script.onload);
	needAttach && document.head.appendChild(script);
};

})();
// webpack/runtime/has_own_property
(function() {
__webpack_require__.o = function (obj, prop) {
	return Object.prototype.hasOwnProperty.call(obj, prop);
};

})();
// webpack/runtime/on_chunk_loaded
(function() {
var deferred = [];
__webpack_require__.O = function (result, chunkIds, fn, priority) {
	if (chunkIds) {
		priority = priority || 0;
		for (var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--)
			deferred[i] = deferred[i - 1];
		deferred[i] = [chunkIds, fn, priority];
		return;
	}
	var notFulfilled = Infinity;
	for (var i = 0; i < deferred.length; i++) {
		var chunkIds = deferred[i][0],
			fn = deferred[i][1],
			priority = deferred[i][2];
		var fulfilled = true;
		for (var j = 0; j < chunkIds.length; j++) {
			if (
				(priority & (1 === 0) || notFulfilled >= priority) &&
				Object.keys(__webpack_require__.O).every(function (key) {
					return __webpack_require__.O[key](chunkIds[j]);
				})
			) {
				chunkIds.splice(j--, 1);
			} else {
				fulfilled = false;
				if (priority < notFulfilled) notFulfilled = priority;
			}
		}
		if (fulfilled) {
			deferred.splice(i--, 1);
			var r = fn();
			if (r !== undefined) result = r;
		}
	}
	return result;
};

})();
// webpack/runtime/async_module
(function() {
var webpackQueues =
	typeof Symbol === "function"
		? Symbol("webpack queues")
		: "__webpack_queues__";
var webpackExports =
	typeof Symbol === "function"
		? Symbol("webpack exports")
		: "__webpack_exports__";
var webpackError =
	typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
var resolveQueue = queue => {
	if (queue && !queue.d) {
		queue.d = 1;
		queue.forEach(fn => fn.r--);
		queue.forEach(fn => (fn.r-- ? fn.r++ : fn()));
	}
};
var wrapDeps = deps =>
	deps.map(dep => {
		if (dep !== null && typeof dep === "object") {
			if (dep[webpackQueues]) return dep;
			if (dep.then) {
				var queue = [];
				queue.d = 0;
				dep.then(
					r => {
						obj[webpackExports] = r;
						resolveQueue(queue);
					},
					e => {
						obj[webpackError] = e;
						resolveQueue(queue);
					}
				);
				var obj = {};
				obj[webpackQueues] = fn => fn(queue);
				return obj;
			}
		}
		var ret = {};
		ret[webpackQueues] = x => {};
		ret[webpackExports] = dep;
		return ret;
	});
__webpack_require__.a = (module, body, hasAwait) => {
	var queue;
	hasAwait && ((queue = []).d = 1);
	var depQueues = new Set();
	var exports = module.exports;
	var currentDeps;
	var outerResolve;
	var reject;
	var promise = new Promise((resolve, rej) => {
		reject = rej;
		outerResolve = resolve;
	});
	promise[webpackExports] = exports;
	promise[webpackQueues] = fn => (
		queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {})
	);
	module.exports = promise;
	body(
		deps => {
			currentDeps = wrapDeps(deps);
			var fn;
			var getResult = () =>
				currentDeps.map(d => {
					if (d[webpackError]) throw d[webpackError];
					return d[webpackExports];
				});
			var promise = new Promise(resolve => {
				fn = () => resolve(getResult);
				fn.r = 0;
				var fnQueue = q =>
					q !== queue &&
					!depQueues.has(q) &&
					(depQueues.add(q), q && !q.d && (fn.r++, q.push(fn)));
				currentDeps.map(dep => dep[webpackQueues](fnQueue));
			});
			return fn.r ? promise : getResult();
		},
		err => (
			err ? reject((promise[webpackError] = err)) : outerResolve(exports),
			resolveQueue(queue)
		)
	);
	queue && (queue.d = 0);
};

})();
// webpack/runtime/define_property_getters
(function() {
__webpack_require__.d = function(exports, definition) {
	for(var key in definition) {
        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
    }
};
})();
// webpack/runtime/make_namespace_object
(function() {
// define __esModule on exports
__webpack_require__.r = function(exports) {
	if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	}
	Object.defineProperty(exports, '__esModule', { value: true });
};

})();
// webpack/runtime/css_loading
(function() {
var installedChunks = {};
var uniqueName = "webpack";
// loadCssChunkData is unnecessary
var loadingAttribute = "data-webpack-loading";
var loadStylesheet = function(chunkId, url, done, hmr) {
	var link,
		needAttach,
		key = "chunk-" + chunkId;
	if (!hmr) {
		var links = document.getElementsByTagName("link");
		for (var i = 0; i < links.length; i++) {
			var l = links[i];
			var href = l.getAttribute("href") || l.href;
			if (href && !href.startsWith(__webpack_require__.p)) {
				href =
					__webpack_require__.p + (href.startsWith("/") ? href.slice(1) : href);
			}
			if (
				l.rel == "stylesheet" &&
				((href && href.startsWith(url)) ||
					l.getAttribute("data-webpack") == uniqueName + ":" + key)
			) {
				link = l;
				break;
			}
		}
		if (!done) return link;
	}
	if (!link) {
		needAttach = true;
		link = document.createElement("link");
		link.setAttribute("data-webpack", uniqueName + ":" + key);
		link.setAttribute(loadingAttribute, 1);
		link.rel = "stylesheet";
		link.href = url;

		if (false && link.href.indexOf(window.location.origin + '/') !== 0) {
			link.crossOrigin = false;
		}
	}
	var onLinkComplete = function (prev, event) {
		link.onerror = link.onload = null;
		link.removeAttribute(loadingAttribute);
		clearTimeout(timeout);
		if (event && event.type != "load") link.parentNode.removeChild(link);
		done(event);
		if (prev) return prev(event);
	};
	if (link.getAttribute(loadingAttribute)) {
		var timeout = setTimeout(
			onLinkComplete.bind(null, undefined, { type: "timeout", target: link }),
			120000
		);
		link.onerror = onLinkComplete.bind(null, link.onerror);
		link.onload = onLinkComplete.bind(null, link.onload);
	} else onLinkComplete(undefined, { type: "load", target: link });
	hmr
		? hmr.parentNode.insertBefore(link, hmr)
		: needAttach && document.head.appendChild(link);
	return link;
};
__webpack_require__.f.css = function (chunkId, promises) {
	// css chunk loading
	var installedChunkData = __webpack_require__.o(installedChunks, chunkId)
		? installedChunks[chunkId]
		: undefined;
	if (installedChunkData !== 0) {
		// 0 means "already installed".

		// a Promise means "currently loading".
		if (installedChunkData) {
			promises.push(installedChunkData[2]);
		} else {
			if ([].indexOf(chunkId) > -1) {
				// setup Promise in chunk cache
				var promise = new Promise(function (resolve, reject) {
					installedChunkData = installedChunks[chunkId] = [resolve, reject];
				});
				promises.push((installedChunkData[2] = promise));

				// start chunk loading
				var url = __webpack_require__.p + __webpack_require__.k(chunkId);
				// create error before stack unwound to get useful stacktrace later
				var error = new Error();
				var loadingEnded = function (event) {
					if (__webpack_require__.o(installedChunks, chunkId)) {
						installedChunkData = installedChunks[chunkId];
						if (installedChunkData !== 0) installedChunks[chunkId] = undefined;
						if (installedChunkData) {
							if (event.type !== "load") {
								var errorType = event && event.type;
								var realSrc = event && event.target && event.target.src;
								error.message =
									"Loading css chunk " +
									chunkId +
									" failed.\n(" +
									errorType +
									": " +
									realSrc +
									")";
								error.name = "ChunkLoadError";
								error.type = errorType;
								error.request = realSrc;
								installedChunkData[1](error);
							} else {
								// loadCssChunkData(__webpack_require__.m, link, chunkId);
								installedChunkData[0]();
							}
						}
					}
				};
				var link = loadStylesheet(chunkId, url, loadingEnded);
			} else installedChunks[chunkId] = 0;
		}
	}
};

})();
// webpack/runtime/jsonp_chunk_loading
(function() {
var installedChunks = {"runtime": 0,};
__webpack_require__.f.j = function (chunkId, promises) {
	// JSONP chunk loading for javascript
	var installedChunkData = __webpack_require__.o(installedChunks, chunkId)
		? installedChunks[chunkId]
		: undefined;
	if (installedChunkData !== 0) {
		// 0 means "already installed".

		// a Promise means "currently loading".
		if (installedChunkData) {
			promises.push(installedChunkData[2]);
		} else {
			if (chunkId) {
				// setup Promise in chunk cache
				var promise = new Promise(function (resolve, reject) {
					installedChunkData = installedChunks[chunkId] = [resolve, reject];
				});
				promises.push((installedChunkData[2] = promise));

				// start chunk loading
				var url = __webpack_require__.p + __webpack_require__.u(chunkId);
				// create error before stack unwound to get useful stacktrace later
				var error = new Error();
				var loadingEnded = function (event) {
					if (__webpack_require__.o(installedChunks, chunkId)) {
						installedChunkData = installedChunks[chunkId];
						if (installedChunkData !== 0) installedChunks[chunkId] = undefined;
						if (installedChunkData) {
							var errorType =
								event && (event.type === "load" ? "missing" : event.type);
							var realSrc = event && event.target && event.target.src;
							error.message =
								"Loading chunk " +
								chunkId +
								" failed.\n(" +
								errorType +
								": " +
								realSrc +
								")";
							error.name = "ChunkLoadError";
							error.type = errorType;
							error.request = realSrc;
							installedChunkData[1](error);
						}
					}
				};
				__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
			} else installedChunks[chunkId] = 0;
		}
	}
};
__webpack_require__.O.j = function (chunkId) {
	return installedChunks[chunkId] === 0;
};
// install a JSONP callback for chunk loading
var webpackJsonpCallback = function (parentChunkLoadingFunction, data) {
	var chunkIds = data[0],
	moreModules = data[1],
	runtime = data[2];
	// add "moreModules" to the modules object,
	// then flag all "chunkIds" as loaded and fire callback
	var moduleId,
		chunkId,
		i = 0;
	if (chunkIds.some(function(id) { return installedChunks[id] !== 0 })) {
		for (moduleId in moreModules) {
			if (__webpack_require__.o(moreModules, moduleId)) {
				__webpack_require__.m[moduleId] = moreModules[moduleId];
			}
		}
		if (runtime) var result = runtime(__webpack_require__);
	}
	if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);
	for (; i < chunkIds.length; i++) {
		chunkId = chunkIds[i];
		if (
			__webpack_require__.o(installedChunks, chunkId) &&
			installedChunks[chunkId]
		) {
			installedChunks[chunkId][0]();
		}
		installedChunks[chunkId] = 0;
	}
	return __webpack_require__.O(result);
};

var chunkLoadingGlobal = self['webpackChunkwebpack'] = self['webpackChunkwebpack'] || [];
chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
chunkLoadingGlobal.push = webpackJsonpCallback.bind(
	null,
	chunkLoadingGlobal.push.bind(chunkLoadingGlobal)
);

})();
// rspack/runtime/wasm loading
(function() {
__webpack_require__.v = (exports, wasmModuleId, wasmModuleHash, importsObj) => {
  var req = fetch(__webpack_require__.p + wasmModuleHash);
  if (typeof WebAssembly.instantiateStreaming === "function") {
  return WebAssembly.instantiateStreaming(req, importsObj).then(
    res => Object.assign(exports, res.instance.exports)
  );
}
  return req
    .then(x => x.arrayBuffer())
    .then(bytes => WebAssembly.instantiate(bytes, importsObj))
    .then(res => Object.assign(exports, res.instance.exports));
};

})();

})()

```
