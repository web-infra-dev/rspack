const { decodeFilteredTest, FilteredStatus } = require("../lib/util/filterUtil");

function extractTestMetric(jsonObj) {
	const testResults = jsonObj["testResults"];
	const willNotSupportTestCount = getTestWillNotSupportTestCount(testResults);

	// in theory, if we could get correct stats of failedTests and failedTestSuites
	// the stats generated by jest should be valid, so we don't need to check any more

	return {
		"Total testSuites": jsonObj.numTotalTestSuites,
		"Total tests": jsonObj.numTotalTests,
		"Total passedTestSuites": jsonObj.numPassedTestSuites,
		"Total passedTests": jsonObj.numPassedTests,
		"Total willNotSupportTest": willNotSupportTestCount,
		"Tests Compatibility": `${(
			((jsonObj.numPassedTests + willNotSupportTestCount) /
				jsonObj.numTotalTests) *
			100
		).toFixed(3)}%`,
	};
}

function getTestWillNotSupportTestCount(testResults) {
	const willNotSupportTestCount = testResults.reduce((acc, testSuite) => {
		return acc + getTestSuiteCountByStatus(testSuite, FilteredStatus.NO_PLAN);
	}, 0);
	return willNotSupportTestCount;
}

function getTestSuiteCountByStatus(suite, status) {
	return suite.assertionResults.filter((item) => {
		// pending means this test is skipped
		const isPending = item.status === "pending";
		if (!isPending) {
			return false;
		}
		return decodeFilteredTest(item.fullName).status === status
	}).length;
}

function renderTestToMarkdown(testFullName) {
	const decoded = decodeFilteredTest(testFullName)
	let icon = "🟢";
	let fullName = testFullName
	let extra = "";
	if (decoded !== null) {
		icon = decoded.status === FilteredStatus.TODO ? "⚪️"
			: decoded.status === FilteredStatus.NO_PLAN ? "⚫️"
			: decoded.status === FilteredStatus.FAILED ? "🔴"
			: decoded.status === FilteredStatus.PARTIAL_PASS ? "🟡"
			: "ERROR"
		fullName = decoded.fullName;
		extra = `: ${decoded.reason}`
	}
	return `${icon} ${fullName}${extra}`
}

function renderAllTestsToMarkdown(jsonObj) {
	const testResults = jsonObj["testResults"];
	return testResults
		.flatMap(testSuite => testSuite.assertionResults)
		// use `1 ` to break GitHub markdown list rendering
		.map((test, index) => `${index + 1} ${renderTestToMarkdown(test.fullName)}`)
		.join('\n')
}

module.exports = {
	extractTestMetric,
	renderAllTestsToMarkdown,
};
