const path = require("path");

const identityLoader = path.resolve(
	__dirname,
	"../fixtures/errors/identity-loader.js"
);
const addCommentLoader = path.resolve(
	__dirname,
	"../fixtures/errors/add-comment-loader.js"
);

/** @type {import('@rspack/test-tools').TErrorCaseConfig[]} */
module.exports = [
	{
		description:
			"should show loader used if it is present when module parsing fails",
		options() {
			return {
				mode: "development",
				entry: "./abc.html",
				module: {
					rules: [
						{
							test: /\.html$/,
							use: [{ loader: identityLoader }]
						}
					]
				}
			};
		},
		async check(diagnostics) {
			expect(diagnostics).toMatchInlineSnapshot(`
			Object {
			  "errors": Array [
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expected ';', '}' or <eof>\\n         â•­â”€[1:10]\\n       1 â”‚ <!DOCTYPE html>\\n         Â·           â”€â”€â”€â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expression expected\\n         â•­â”€[1:0]\\n       1 â”‚ <!DOCTYPE html>\\n         Â· â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			  ],
			  "warnings": Array [],
			}
		`);
		}
	},
	{
		description:
			"should show all loaders used if they are in config when module parsing fails",
		options() {
			return {
				mode: "development",
				entry: "./abc.html",
				module: {
					rules: [
						{
							test: /\.html$/,
							use: [{ loader: identityLoader }, { loader: addCommentLoader }]
						}
					]
				}
			};
		},
		async check(diagnostics) {
			expect(diagnostics).toMatchInlineSnapshot(`
			Object {
			  "errors": Array [
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expected ';', '}' or <eof>\\n         â•­â”€[1:10]\\n       1 â”‚ <!DOCTYPE html>\\n         Â·           â”€â”€â”€â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expression expected\\n         â•­â”€[1:0]\\n       1 â”‚ <!DOCTYPE html>\\n         Â· â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			  ],
			  "warnings": Array [],
			}
		`);
		}
	},
	{
		description: "should show all loaders used if use is a string",
		options() {
			return {
				mode: "development",
				entry: "./abc.html",
				module: {
					rules: [
						{ test: /\.html$/, use: identityLoader },
						{ test: /\.html$/, use: addCommentLoader }
					]
				}
			};
		},
		async check(diagnostics) {
			expect(diagnostics).toMatchInlineSnapshot(`
			Object {
			  "errors": Array [
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expected ';', '}' or <eof>\\n         â•­â”€[1:10]\\n       1 â”‚ <!DOCTYPE html>\\n         Â·           â”€â”€â”€â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expression expected\\n         â•­â”€[1:0]\\n       1 â”‚ <!DOCTYPE html>\\n         Â· â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        File was processed with these loaders:\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js\\n         * <TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js\\n        You may need an additional loader to handle the result of these loaders.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/identity-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/add-comment-loader.js!<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			  ],
			  "warnings": Array [],
			}
		`);
		}
	},
	{
		description:
			"should show 'no loaders are configured to process this file' if loaders are not included in config when module parsing fails",
		options() {
			return {
				mode: "development",
				entry: "./abc.html",
				module: {}
			};
		},
		async check(diagnostics) {
			expect(diagnostics).toMatchInlineSnapshot(`
			Object {
			  "errors": Array [
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expected ';', '}' or <eof>\\n         â•­â”€[1:10]\\n       1 â”‚ <!DOCTYPE html>\\n         Â·           â”€â”€â”€â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        You may need an appropriate loader to handle this file type.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Expression expected\\n         â•­â”€[1:0]\\n       1 â”‚ <!DOCTYPE html>\\n         Â· â”€\\n       2 â”‚ <html>\\n       3 â”‚     <body>\\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        You may need an appropriate loader to handle this file type.\\n",
			      "moduleId": "./abc.html",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/errors/abc.html",
			      "moduleName": "./abc.html",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			  ],
			  "warnings": Array [],
			}
		`);
		}
	},
	{
		description:
			"should show 'source code omitted for this binary file' when module parsing fails for binary files",
		options() {
			return {
				mode: "development",
				entry: path.resolve(__dirname, "../fixtures/font.ttf"),
				module: {}
			};
		},
		async check(diagnostics) {
			expect(diagnostics).toMatchInlineSnapshot(`
			Object {
			  "errors": Array [
			    Object {
			      "code": "ModuleParseError",
			      "message": "  Ã— Module parse failed:\\n  â•°â”€â–¶   Ã— JavaScript parse error: Unexpected character '/0'\\n         â•­â”€[1:0]\\n       1 â”‚     \\n         Â· â–²\\n       2 â”‚  ï¿½  PGPOSï¿½\\n       3 â”‚ ï¿½ï¿½  \`X  :XGSUB!?-ï¿½  ï¿½ï¿½  ï¿½OS/2kï¿½ï¿½  X   \`cmap)9ï¿½8  $  ï¿½gasp  !  \`H   glyfï¿½ï¿½H    ï¿½  PheadNE   ï¿½   6hheaï¿½C     $hmtx}ï¿½*   ï¿½  llocaï¿½dï¿½ï¿½  ï¿½  8maxp7ï¿½  8    name P<ï¿½  Z  ï¿½post#_ï¿½s  [ï¿½  {    Nï¿½ï¿½Oï¿½_<ï¿½ ï¿½    ï¿½Vn/    ï¿½ÑšUï¿½Pï¿½ï¿½ï¿½               ï¿½ï¿½  ï¿½ï¿½Pï¿½Pï¿½                   ï¿½ \\n         â•°â”€â”€â”€â”€\\n      \\n  help: \\n        You may need an appropriate loader to handle this file type.\\n",
			      "moduleId": "../font.ttf",
			      "moduleIdentifier": "<TEST_TOOLS_ROOT>/fixtures/font.ttf",
			      "moduleName": "../font.ttf",
			      "moduleTrace": Array [],
			      "stack": undefined,
			    },
			  ],
			  "warnings": Array [],
			}
		`);
		}
	}
];
