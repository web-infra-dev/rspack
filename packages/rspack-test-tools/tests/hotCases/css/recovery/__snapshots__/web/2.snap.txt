# Case recovery: Step 2

## Changed Files
- index.css

## Asset Files
- Bundle: bundle.js
- Manifest: main.LAST_HASH.hot-update.json, size: 28
- Update: main.LAST_HASH.hot-update.js, size: 7241

## Manifest

### main.LAST_HASH.hot-update.json

```json
{"c":["main"],"r":[],"m":[]}
```


## Update


### main.LAST_HASH.hot-update.js

#### Changed Modules
- ../../../../../rspack/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js
- ../../../../../rspack/dist/builtin-plugin/css-extract/hmr/normalizeUrl.js
- ./index.css?8047

#### Changed Runtime Modules
- webpack/runtime/get_full_hash

#### Changed Content
```js
"use strict";
self["webpackHotUpdate"]('main', {
"../../../../../rspack/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js": (function (__unused_webpack_module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cssReload = void 0;
const normalizeUrl_1 = __webpack_require__(/*! ./normalizeUrl */ "../../../../../rspack/dist/builtin-plugin/css-extract/hmr/normalizeUrl.js");
const srcByModuleId = Object.create(null);
const noDocument = typeof document === "undefined";
const { forEach } = Array.prototype;
function debounce(fn, time) {
    let timeout = 0;
    return function () {
        // @ts-ignore
        const self = this;
        const args = arguments;
        const functionCall = function functionCall() {
            return fn.apply(self, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(functionCall, time);
    };
}
function noop() { }
function getCurrentScriptUrl(moduleId) {
    let src = srcByModuleId[moduleId];
    if (!src) {
        if (document.currentScript) {
            ({ src } = document.currentScript);
        }
        else {
            const scripts = document.getElementsByTagName("script");
            const lastScriptTag = scripts[scripts.length - 1];
            if (lastScriptTag) {
                ({ src } = lastScriptTag);
            }
        }
        srcByModuleId[moduleId] = src;
    }
    return (fileMap) => {
        if (!src) {
            return null;
        }
        const splitResult = src.split(/([^//]+)/.js$/);
        const filename = splitResult && splitResult[1];
        if (!filename) {
            return [src.replace(".js", ".css")];
        }
        if (!fileMap) {
            return [src.replace(".js", ".css")];
        }
        return fileMap.split(",").map(mapRule => {
            const reg = new RegExp(`${filename}/.js$`, "g");
            return (0, normalizeUrl_1.normalizeUrl)(src.replace(reg, `${mapRule.replace(/{fileName}/g, filename)}.css`));
        });
    };
}
function updateCss(el, url) {
    if (!url) {
        if (!el.href) {
            return;
        }
        url = el.href.split("?")[0];
    }
    if (!isUrlRequest(url)) {
        return;
    }
    if (el.isLoaded === false) {
        // We seem to be about to replace a css link that hasn't loaded yet.
        // We're probably changing the same file more than once.
        return;
    }
    if (!url || !(url.indexOf(".css") > -1)) {
        return;
    }
    el.visited = true;
    const newEl = el.cloneNode();
    newEl.isLoaded = false;
    newEl.addEventListener("load", () => {
        if (newEl.isLoaded) {
            return;
        }
        newEl.isLoaded = true;
        el.parentNode?.removeChild(el);
    });
    newEl.addEventListener("error", () => {
        if (newEl.isLoaded) {
            return;
        }
        newEl.isLoaded = true;
        el.parentNode?.removeChild(el);
    });
    newEl.href = `${url}?${Date.now()}`;
    if (el.nextSibling) {
        el.parentNode?.insertBefore(newEl, el.nextSibling);
    }
    else {
        el.parentNode?.appendChild(newEl);
    }
}
function getReloadUrl(href, src) {
    let ret = "";
    href = (0, normalizeUrl_1.normalizeUrl)(href);
    src.some(url => {
        if (href.indexOf(src) > -1) {
            ret = url;
        }
    });
    return ret;
}
function reloadStyle(src) {
    if (!src) {
        return false;
    }
    const elements = document.querySelectorAll("link");
    let loaded = false;
    forEach.call(elements, el => {
        if (!el.href) {
            return;
        }
        const url = getReloadUrl(el.href, src);
        if (!isUrlRequest(url)) {
            return;
        }
        if (el.visited === true) {
            return;
        }
        if (url) {
            updateCss(el, url);
            loaded = true;
        }
    });
    return loaded;
}
function reloadAll() {
    const elements = document.querySelectorAll("link");
    forEach.call(elements, el => {
        if (el.visited === true) {
            return;
        }
        updateCss(el);
    });
}
function isUrlRequest(url) {
    // An URL is not an request if
    // It is not http or https
    if (!/^[a-zA-Z][a-zA-Z/d+/-.]*:/.test(url)) {
        return false;
    }
    return true;
}
function cssReload(moduleId, options) {
    if (noDocument) {
        console.log("no window.document found, will not HMR CSS");
        return noop;
    }
    const getScriptSrc = getCurrentScriptUrl(moduleId);
    function update() {
        const src = getScriptSrc(options.filename);
        const reloaded = reloadStyle(src);
        if (options.locals) {
            console.log("[HMR] Detected local css modules. Reload all css");
            reloadAll();
            return;
        }
        if (reloaded) {
            console.log("[HMR] css reload %s", src?.join(" "));
        }
        else {
            console.log("[HMR] Reload all css");
            reloadAll();
        }
    }
    return debounce(update, 50);
}
exports.cssReload = cssReload;


}),
"../../../../../rspack/dist/builtin-plugin/css-extract/hmr/normalizeUrl.js": (function (__unused_webpack_module, exports) {

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeUrl = void 0;
function normalizeUrl(urlString) {
    urlString = urlString.trim();
    if (/^data:/i.test(urlString)) {
        return urlString;
    }
    const protocol = urlString.indexOf("//") !== -1 ? urlString.split("//")[0] + "//" : "";
    const components = urlString
        .replace(new RegExp(protocol, "i"), "")
        .split("/");
    const host = components[0].toLowerCase().replace(//.$/, "");
    components[0] = "";
    const path = components
        .reduce((accumulator, item) => {
        switch (item) {
            case "..":
                accumulator.pop();
                break;
            case ".":
                break;
            default:
                accumulator.push(item);
        }
        return accumulator;
    }, [])
        .join("/");
    return protocol + host + path;
}
exports.normalizeUrl = normalizeUrl;


}),
"./index.css?8047": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        var cssReload = (__webpack_require__(/*! ../../../../../rspack/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js */ "../../../../../rspack/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = function () {
	return "CURRENT_HASH";
};

})();

}
);
```