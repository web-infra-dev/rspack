// Mocked redux module for testing inter-shared-module dependency tracking
// This simulates the exports that redux provides

// Mock implementation of redux functions
function createStore(reducer) {
	let state = reducer(undefined, { type: '@@INIT' });
	const listeners = [];
	
	return {
		getState: () => state,
		dispatch: (action) => {
			state = reducer(state, action);
			listeners.forEach(listener => listener());
			return action;
		},
		subscribe: (listener) => {
			listeners.push(listener);
			return () => {
				const index = listeners.indexOf(listener);
				if (index >= 0) listeners.splice(index, 1);
			};
		}
	};
}

function combineReducers(reducers) {
	return (state = {}, action) => {
		const nextState = {};
		for (const key in reducers) {
			nextState[key] = reducers[key](state[key], action);
		}
		return nextState;
	};
}

function compose(...funcs) {
	if (funcs.length === 0) return arg => arg;
	if (funcs.length === 1) return funcs[0];
	return funcs.reduce((a, b) => (...args) => a(b(...args)));
}

function applyMiddleware(...middlewares) {
	return (createStore) => (reducer, preloadedState) => {
		const store = createStore(reducer, preloadedState);
		const middlewareAPI = {
			getState: store.getState,
			dispatch: (action) => store.dispatch(action)
		};
		const chain = middlewares.map(middleware => middleware(middlewareAPI));
		const dispatch = compose(...chain)(store.dispatch);
		return { ...store, dispatch };
	};
}

function bindActionCreators(actionCreators, dispatch) {
	const boundActionCreators = {};
	for (const key in actionCreators) {
		boundActionCreators[key] = (...args) => dispatch(actionCreators[key](...args));
	}
	return boundActionCreators;
}

// This is what @reduxjs/toolkit uses internally
function isPlainObject(obj) {
	if (typeof obj !== 'object' || obj === null) return false;
	const proto = Object.getPrototypeOf(obj);
	return proto === Object.prototype || proto === null;
}

// Export all the functions that redux provides
module.exports = {
	createStore,
	combineReducers,
	compose,
	applyMiddleware,
	bindActionCreators,
	isPlainObject,
	// Add some additional exports that redux might have
	__DO_NOT_USE__ActionTypes: {
		INIT: '@@redux/INIT'
	}
};