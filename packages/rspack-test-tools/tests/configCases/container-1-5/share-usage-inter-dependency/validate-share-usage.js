const fs = require("fs");
const path = require("path");

/**
 * Validates that inter-shared-module dependencies are correctly tracked in share-usage.json
 * @param {string} outputPath - Path to the build output directory
 */
module.exports = function validateShareUsage(outputPath) {
	// Check if share-usage.json was generated
	const shareUsageFile = path.join(outputPath, "share-usage.json");
	
	// Assert file exists
	if (!fs.existsSync(shareUsageFile)) {
		throw new Error("FAIL: share-usage.json file was not generated by ShareUsagePlugin");
	}
	
	// Read and parse the JSON
	let shareUsageData;
	try {
		const content = fs.readFileSync(shareUsageFile, "utf8");
		shareUsageData = JSON.parse(content);
	} catch (error) {
		throw new Error(`Failed to parse share-usage.json: ${error.message}`);
	}
	
	// Basic structure validation
	if (typeof shareUsageData !== "object" || shareUsageData === null) {
		throw new Error("share-usage.json should be an object");
	}
	
	if (!shareUsageData.treeShake) {
		throw new Error("share-usage.json should have a treeShake property");
	}
	
	// Check that redux exports used by @reduxjs/toolkit are marked as true
	if (shareUsageData.treeShake.redux) {
		const reduxExports = shareUsageData.treeShake.redux;
		
		// These exports are used internally by @reduxjs/toolkit
		// and should be marked as true even though our app doesn't directly use them
		const expectedUsedExports = [
			"isPlainObject", // Used by toolkit for checking plain objects
			"combineReducers", // Used for combining reducers
			"createStore", // Used internally for legacy store creation
			"compose", // Used for middleware composition
			"applyMiddleware", // Used for applying middleware
			"bindActionCreators" // Used for action binding
		];
		
		// At least some of these should be true if our fix is working
		let foundUsedExport = false;
		for (const exportName of expectedUsedExports) {
			if (reduxExports[exportName] === true) {
				foundUsedExport = true;
				break;
			}
		}
		
		if (!foundUsedExport) {
			throw new Error(
				"Inter-module dependency tracking failed: Redux exports used by @reduxjs/toolkit are not marked as used"
			);
		}
		
		// isPlainObject should definitely be true since toolkit uses it
		if (reduxExports.isPlainObject !== true) {
			throw new Error(
				"Expected redux.isPlainObject to be marked as used (it's used by @reduxjs/toolkit)"
			);
		}
	} else {
		throw new Error("redux module not found in share-usage.json");
	}
	
	// Check that @reduxjs/toolkit exports we use are marked as true
	if (shareUsageData.treeShake["@reduxjs/toolkit"]) {
		const toolkitExports = shareUsageData.treeShake["@reduxjs/toolkit"];
		
		// These are the exports we directly use in our test
		if (toolkitExports.configureStore !== true) {
			throw new Error("Expected @reduxjs/toolkit.configureStore to be marked as used");
		}
		if (toolkitExports.createSlice !== true) {
			throw new Error("Expected @reduxjs/toolkit.createSlice to be marked as used");
		}
	} else {
		throw new Error("@reduxjs/toolkit module not found in share-usage.json");
	}
	
	console.log("âœ“ Inter-shared-module dependency tracking validation passed");
};