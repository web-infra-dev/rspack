const fs = require("fs");
const path = require("path");

/**
 * Validates that CommonJS module exports are correctly tracked in share-usage.json
 * @param {string} outputPath - Path to the build output directory
 */
module.exports = function validateShareUsage(outputPath) {
	// Check if share-usage.json was generated
	const shareUsageFile = path.join(outputPath, "share-usage.json");
	
	// Assert file exists
	if (!fs.existsSync(shareUsageFile)) {
		throw new Error("FAIL: share-usage.json file was not generated by ShareUsagePlugin");
	}
	
	// Read and parse the JSON
	let shareUsageData;
	try {
		const content = fs.readFileSync(shareUsageFile, "utf8");
		shareUsageData = JSON.parse(content);
	} catch (error) {
		throw new Error(`Failed to parse share-usage.json: ${error.message}`);
	}
	
	// Basic structure validation
	if (typeof shareUsageData !== "object" || shareUsageData === null) {
		throw new Error("share-usage.json should be an object");
	}
	
	if (!shareUsageData.treeShake) {
		throw new Error("share-usage.json should have a treeShake property");
	}
	
	const modules = shareUsageData.treeShake;
	
	// Validate exports.X pattern module
	validateExportsPattern(modules);
	
	// Validate module.exports = { ... } pattern module
	validateModuleExportsPattern(modules);
	
	// Validate mixed pattern module
	validateMixedPattern(modules);
	
	console.log("✓ CommonJS export tracking validation passed");
};

/**
 * Validate exports.X and module.exports.X pattern tracking
 */
function validateExportsPattern(modules) {
	const moduleName = "./cjs-exports-pattern";
	
	if (!modules[moduleName]) {
		throw new Error(`Module '${moduleName}' not found in share-usage.json`);
	}
	
	const moduleData = modules[moduleName];
	
	// Check that used exports are marked as true
	const expectedUsed = ["formatDate", "processData"];
	for (const exportName of expectedUsed) {
		if (moduleData[exportName] !== true) {
			throw new Error(
				`Expected ${moduleName}.${exportName} to be marked as used (true), got: ${moduleData[exportName]}`
			);
		}
	}
	
	// Check that unused exports are marked as false (if they are tracked)
	const expectedUnused = ["unusedFunction", "helperUtil", "parseJSON", "anotherUnused"];
	for (const exportName of expectedUnused) {
		// These might be tracked as false or not tracked at all
		if (moduleData.hasOwnProperty(exportName) && moduleData[exportName] !== false) {
			throw new Error(
				`Expected ${moduleName}.${exportName} to be marked as unused (false), got: ${moduleData[exportName]}`
			);
		}
	}
	
	// Ensure chunk_characteristics exists
	if (!moduleData.chunk_characteristics) {
		throw new Error(`${moduleName}: Missing chunk_characteristics`);
	}
	
	console.log(`✓ ${moduleName}: exports.X pattern tracking validated`);
}

/**
 * Validate module.exports = { ... } pattern tracking
 */
function validateModuleExportsPattern(modules) {
	const moduleName = "./cjs-module-exports-pattern";
	
	if (!modules[moduleName]) {
		throw new Error(`Module '${moduleName}' not found in share-usage.json`);
	}
	
	const moduleData = modules[moduleName];
	
	// Check that used exports are marked as true
	const expectedUsed = ["calculateSum", "formatCurrency"];
	for (const exportName of expectedUsed) {
		if (moduleData[exportName] !== true) {
			// This pattern might result in __dynamic_commonjs__ if not fully analyzable
			if (moduleData["__dynamic_commonjs__"] === true) {
				console.log(`  ℹ ${moduleName}: Using dynamic CommonJS marker (expected for module.exports = {...} pattern)`);
				break;
			}
			throw new Error(
				`Expected ${moduleName}.${exportName} to be marked as used (true), got: ${moduleData[exportName]}`
			);
		}
	}
	
	// Check for unused exports if they are tracked
	const expectedUnused = ["calculateAverage", "formatPercentage", "helpers", "VERSION", "config"];
	let hasExportTracking = false;
	for (const exportName of expectedUnused) {
		if (moduleData.hasOwnProperty(exportName)) {
			hasExportTracking = true;
			if (moduleData[exportName] !== false) {
				throw new Error(
					`Expected ${moduleName}.${exportName} to be marked as unused (false), got: ${moduleData[exportName]}`
				);
			}
		}
	}
	
	// If no specific exports are tracked, we should have __dynamic_commonjs__
	if (!hasExportTracking && !expectedUsed.some(e => moduleData.hasOwnProperty(e))) {
		if (!moduleData["__dynamic_commonjs__"]) {
			throw new Error(
				`${moduleName}: Expected either specific export tracking or __dynamic_commonjs__ marker`
			);
		}
	}
	
	// Ensure chunk_characteristics exists
	if (!moduleData.chunk_characteristics) {
		throw new Error(`${moduleName}: Missing chunk_characteristics`);
	}
	
	console.log(`✓ ${moduleName}: module.exports = {...} pattern tracking validated`);
}

/**
 * Validate mixed pattern module tracking
 */
function validateMixedPattern(modules) {
	const moduleName = "./cjs-mixed-pattern";
	
	if (!modules[moduleName]) {
		throw new Error(`Module '${moduleName}' not found in share-usage.json`);
	}
	
	const moduleData = modules[moduleName];
	
	// Check that used exports are marked as true
	const expectedUsed = ["utilityA"];
	for (const exportName of expectedUsed) {
		if (moduleData[exportName] !== true) {
			throw new Error(
				`Expected ${moduleName}.${exportName} to be marked as used (true), got: ${moduleData[exportName]}`
			);
		}
	}
	
	// Check that unused exports are marked as false (if tracked)
	const expectedUnused = ["utilityB", "utilityC", "utilityD", "utilityE", "unusedUtilityF", "unusedUtilityG"];
	let trackedUnusedCount = 0;
	for (const exportName of expectedUnused) {
		if (moduleData.hasOwnProperty(exportName)) {
			trackedUnusedCount++;
			if (moduleData[exportName] !== false) {
				throw new Error(
					`Expected ${moduleName}.${exportName} to be marked as unused (false), got: ${moduleData[exportName]}`
				);
			}
		}
	}
	
	// We should track at least some of the unused exports
	if (trackedUnusedCount === 0) {
		console.log(`  ⚠ ${moduleName}: No unused exports tracked (may be limitations with certain patterns)`);
	}
	
	// Ensure chunk_characteristics exists
	if (!moduleData.chunk_characteristics) {
		throw new Error(`${moduleName}: Missing chunk_characteristics`);
	}
	
	console.log(`✓ ${moduleName}: Mixed pattern tracking validated`);
}