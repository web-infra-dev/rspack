{
  "modules": {
    "__WORKSPACE__/packages/rspack-test-tools/tests/runtimeDiffCases/chunk-loading/async-wasm-loading/src/index.js": "(function () {\n  it(\"should allow to run a WebAssembly module with imports\", function () {\n    return __webpack_require__.e(\"src_wasm_wat\").then(__webpack_require__.bind(__webpack_require__, \"./src/wasm.wat\")).then(function (wasm) {\n      const result = wasm.addNumber(20);\n      expect(result).toEqual(42);\n    });\n  });\n});"
  },
  "runtimeModules": {
    "webpack/runtime/bootstrap": "var __webpack_module_cache__ = {};\nfunction __webpack_require__(moduleId) {\n  var cachedModule = __webpack_module_cache__[moduleId];\n  if (cachedModule !== undefined) return cachedModule.exports;\n  var module = __webpack_module_cache__[moduleId] = {\n    \"exports\": {},\n    \"id\": moduleId\n  };\n  __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n  return module.exports;\n}\n__webpack_require__.m = __webpack_modules__;",
    "webpack/runtime/async module": "!function () {\n  var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\n  var webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\n  var webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\n  var resolveQueue = function (queue) {\n    if (queue && queue.d < 1) {\n      queue.d = 1;\n      queue.forEach(function (fn) {\n        fn.r--;\n      });\n      queue.forEach(function (fn) {\n        fn.r-- ? fn.r++ : fn();\n      });\n    }\n  };\n  var wrapDeps = function (deps) {\n    return deps.map(function (dep) {\n      if (dep !== null && typeof dep === \"object\") {\n        if (dep[webpackQueues]) return dep;\n        if (dep.then) {\n          var queue = [];\n          queue.d = 0;\n          dep.then(function (r) {\n            obj[webpackExports] = r;\n            resolveQueue(queue);\n          }, function (e) {\n            obj[webpackError] = e;\n            resolveQueue(queue);\n          });\n          var obj = {};\n          obj[webpackQueues] = function (fn) {\n            fn(queue);\n          };\n          return obj;\n        }\n      }\n      var ret = {};\n      ret[webpackQueues] = function () {};\n      ret[webpackExports] = dep;\n      return ret;\n    });\n  };\n  __webpack_require__.a = function (module, body, hasAwait) {\n    var queue;\n    hasAwait && ((queue = []).d = -1);\n    var depQueues = new Set();\n    var exports = module.exports;\n    var currentDeps;\n    var outerResolve;\n    var reject;\n    var promise = new Promise(function (resolve, rej) {\n      reject = rej;\n      outerResolve = resolve;\n    });\n    promise[webpackExports] = exports;\n    promise[webpackQueues] = function (fn) {\n      queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](function () {});\n    };\n    module.exports = promise;\n    body(function (deps) {\n      currentDeps = wrapDeps(deps);\n      var fn;\n      var getResult = function () {\n        return currentDeps.map(function (d) {\n          if (d[webpackError]) throw d[webpackError];\n          return d[webpackExports];\n        });\n      };\n      var promise = new Promise(function (resolve) {\n        fn = function () {\n          resolve(getResult);\n        };\n        fn.r = 0;\n        var fnQueue = function (q) {\n          q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn)));\n        };\n        currentDeps.map(function (dep) {\n          dep[webpackQueues](fnQueue);\n        });\n      });\n      return fn.r ? promise : getResult();\n    }, function (err) {\n      err ? reject(promise[webpackError] = err) : outerResolve(exports), resolveQueue(queue);\n    });\n    queue && queue.d < 0 && (queue.d = 0);\n  };\n}();",
    "webpack/runtime/ensure chunk": "!function () {\n  __webpack_require__.f = {};\n  __webpack_require__.e = function (chunkId) {\n    return Promise.all(Object.keys(__webpack_require__.f).reduce(function (promises, key) {\n      __webpack_require__.f[key](chunkId, promises);\n      return promises;\n    }, []));\n  };\n}();",
    "webpack/runtime/get javascript chunk filename": "!function () {\n  __webpack_require__.u = function (chunkId) {\n    return \"\" + chunkId + \".chunk.js\";\n  };\n}();",
    "webpack/runtime/global": "!function () {\n  __webpack_require__.g = function () {\n    if (typeof globalThis === \"object\") return globalThis;\n    try {\n      return this || new Function(\"return this\")();\n    } catch (e) {\n      if (typeof window === \"object\") return window;\n    }\n  }();\n}();",
    "webpack/runtime/hasOwnProperty shorthand": "!function () {\n  __webpack_require__.o = function (obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  };\n}();",
    "webpack/runtime/load script": "!function () {\n  var inProgress = {};\n  __webpack_require__.l = function (url, done, key, chunkId) {\n    if (inProgress[url]) {\n      inProgress[url].push(done);\n      return;\n    }\n    var script, needAttach;\n    if (key !== undefined) {\n      var scripts = document.getElementsByTagName(\"script\");\n      for (var i = 0; i < scripts.length; i++) {\n        var s = scripts[i];\n        if (s.getAttribute(\"src\") == url) {\n          script = s;\n          break;\n        }\n      }\n    }\n    if (!script) {\n      needAttach = true;\n      script = document.createElement(\"script\");\n      script.charset = \"utf-8\";\n      script.timeout = 120;\n      if (__webpack_require__.nc) script.setAttribute(\"nonce\", __webpack_require__.nc);\n      script.src = url;\n    }\n    inProgress[url] = [done];\n    var onScriptComplete = function (prev, event) {\n      script.onerror = script.onload = null;\n      clearTimeout(timeout);\n      var doneFns = inProgress[url];\n      delete inProgress[url];\n      script.parentNode && script.parentNode.removeChild(script);\n      doneFns && doneFns.forEach(function (fn) {\n        return fn(event);\n      });\n      if (prev) return prev(event);\n    };\n    var timeout = setTimeout(onScriptComplete.bind(null, undefined, {\n      \"target\": script,\n      \"type\": \"timeout\"\n    }), 120000);\n    script.onerror = onScriptComplete.bind(null, script.onerror);\n    script.onload = onScriptComplete.bind(null, script.onload);\n    needAttach && document.head.appendChild(script);\n  };\n}();",
    "webpack/runtime/wasm loading": "!function () {\n  __webpack_require__.v = function (exports, wasmModuleId, wasmModuleHash, importsObj) {\n    return new Promise(function (resolve, reject) {\n      try {\n        var {\n          \"readFile\": readFile\n        } = require(\"fs\");\n        var {\n          \"join\": join\n        } = require(\"path\");\n        readFile(join(__dirname, \"\" + wasmModuleHash + \".module.wasm\"), function (err, buffer) {\n          if (err) return reject(err);\n          resolve({\n            arrayBuffer() {\n              return buffer;\n            }\n          });\n        });\n      } catch (err) {\n        reject(err);\n      }\n    }).then(function (x) {\n      return x.arrayBuffer();\n    }).then(function (bytes) {\n      return WebAssembly.instantiate(bytes, importsObj);\n    }).then(function (res) {\n      return Object.assign(exports, res.instance.exports);\n    });\n  };\n}();",
    "webpack/runtime/publicPath": "!function () {\n  var scriptUrl;\n  if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n  var document = __webpack_require__.g.document;\n  if (!scriptUrl && document) {\n    if (document.currentScript && document.currentScript.tagName.toUpperCase() === \"SCRIPT\") scriptUrl = document.currentScript.src;\n    if (!scriptUrl) {\n      var scripts = document.getElementsByTagName(\"script\");\n      if (scripts.length) {\n        var i = scripts.length - 1;\n        while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n      }\n    }\n  }\n  if (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n  scriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n  __webpack_require__.p = scriptUrl;\n}();",
    "webpack/runtime/jsonp chunk loading": "!function () {\n  var installedChunks = {\n    \"main\": 0\n  };\n  __webpack_require__.f.j = function (chunkId, promises) {\n    var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n    if (installedChunkData !== 0) if (installedChunkData) promises.push(installedChunkData[2]);else {\n      var promise = new Promise(function (resolve, reject) {\n        installedChunkData = installedChunks[chunkId] = [resolve, reject];\n      });\n      promises.push(installedChunkData[2] = promise);\n      var url = __webpack_require__.p + __webpack_require__.u(chunkId);\n      var error = new Error();\n      var loadingEnded = function (event) {\n        if (__webpack_require__.o(installedChunks, chunkId)) {\n          installedChunkData = installedChunks[chunkId];\n          if (installedChunkData !== 0) installedChunks[chunkId] = undefined;\n          if (installedChunkData) {\n            var errorType = event && (event.type === \"load\" ? \"missing\" : event.type);\n            var realSrc = event && event.target && event.target.src;\n            error.message = \"Loading chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realSrc + \")\";\n            error.name = \"ChunkLoadError\";\n            error.type = errorType;\n            error.request = realSrc;\n            installedChunkData[1](error);\n          }\n        }\n      };\n      __webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n    }\n  };\n  var webpackJsonpCallback = function (parentChunkLoadingFunction, data) {\n    var chunkIds = data[0];\n    var moreModules = data[1];\n    var runtime = data[2];\n    var moduleId,\n      chunkId,\n      i = 0;\n    if (chunkIds.some(function (id) {\n      return installedChunks[id] !== 0;\n    })) {\n      for (moduleId in moreModules) if (__webpack_require__.o(moreModules, moduleId)) __webpack_require__.m[moduleId] = moreModules[moduleId];\n      if (runtime) var result = runtime(__webpack_require__);\n    }\n    if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n    for (; i < chunkIds.length; i++) {\n      chunkId = chunkIds[i];\n      if (__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) installedChunks[chunkId][0]();\n      installedChunks[chunkId] = 0;\n    }\n  };\n  var chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\n  chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n  chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n}();"
  }
}