{
  "modules": {
    "__WORKSPACE__/packages/rspack-test-tools/tests/runtimeDiffCases/runtime-module/get-trusted-types-policy/src/index.js": "(function () {\n  __webpack_require__.e(\"chunk\").then(__webpack_require__.bind(__webpack_require__, \"./src/chunk.js\"));\n});"
  },
  "runtimeModules": {
    "webpack/runtime/bootstrap": "var __webpack_module_cache__ = {};\nfunction __webpack_require__(moduleId) {\n  var cachedModule = __webpack_module_cache__[moduleId];\n  if (cachedModule !== undefined) return cachedModule.exports;\n  var module = __webpack_module_cache__[moduleId] = {\n    \"exports\": {}\n  };\n  __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n  return module.exports;\n}\n__webpack_require__.m = __webpack_modules__;",
    "webpack/runtime/ensure chunk": "!function () {\n  __webpack_require__.f = {};\n  __webpack_require__.e = function (chunkId) {\n    return Promise.all(Object.keys(__webpack_require__.f).reduce(function (promises, key) {\n      __webpack_require__.f[key](chunkId, promises);\n      return promises;\n    }, []));\n  };\n}();",
    "webpack/runtime/get javascript chunk filename": "!function () {\n  __webpack_require__.u = function (chunkId) {\n    return \"\" + chunkId + \".chunk.js\";\n  };\n}();",
    "webpack/runtime/global": "!function () {\n  __webpack_require__.g = function () {\n    if (typeof globalThis === \"object\") return globalThis;\n    try {\n      return this || new Function(\"return this\")();\n    } catch (e) {\n      if (typeof window === \"object\") return window;\n    }\n  }();\n}();",
    "webpack/runtime/hasOwnProperty shorthand": "!function () {\n  __webpack_require__.o = function (obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  };\n}();",
    "webpack/runtime/make namespace object": "!function () {\n  __webpack_require__.r = function (exports) {\n    if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) Object.defineProperty(exports, Symbol.toStringTag, {\n      \"value\": \"Module\"\n    });\n    Object.defineProperty(exports, \"__esModule\", {\n      \"value\": true\n    });\n  };\n}();",
    "webpack/runtime/trusted types policy": "!function () {\n  var policy;\n  __webpack_require__.tt = function () {\n    if (policy === undefined) {\n      policy = {\n        \"createScriptURL\": function (url) {\n          return url;\n        }\n      };\n      if (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) policy = trustedTypes.createPolicy(\"my-application#webpack\", policy);\n    }\n    return policy;\n  };\n}();",
    "webpack/runtime/trusted types script url": "!function () {\n  __webpack_require__.tu = function (url) {\n    return __webpack_require__.tt().createScriptURL(url);\n  };\n}();",
    "webpack/runtime/publicPath": "!function () {\n  var scriptUrl;\n  if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n  var document = __webpack_require__.g.document;\n  if (!scriptUrl && document) {\n    if (document.currentScript && document.currentScript.tagName.toUpperCase() === \"SCRIPT\") scriptUrl = document.currentScript.src;\n    if (!scriptUrl) {\n      var scripts = document.getElementsByTagName(\"script\");\n      if (scripts.length) {\n        var i = scripts.length - 1;\n        while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n      }\n    }\n  }\n  if (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n  scriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n  __webpack_require__.p = scriptUrl;\n}();",
    "webpack/runtime/importScripts chunk loading": "!function () {\n  var installedChunks = {\n    \"bundle\": 1\n  };\n  var installChunk = function (data) {\n    var chunkIds = data[0];\n    var moreModules = data[1];\n    var runtime = data[2];\n    for (var moduleId in moreModules) if (__webpack_require__.o(moreModules, moduleId)) __webpack_require__.m[moduleId] = moreModules[moduleId];\n    if (runtime) runtime(__webpack_require__);\n    while (chunkIds.length) installedChunks[chunkIds.pop()] = 1;\n    parentChunkLoadingFunction(data);\n  };\n  __webpack_require__.f.i = function (chunkId, promises) {\n    if (!installedChunks[chunkId]) importScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.u(chunkId)));\n  };\n  var chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\n  var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\n  chunkLoadingGlobal.push = installChunk;\n}();"
  }
}