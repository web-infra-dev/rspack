"use strict";
(self["webpackChunkrspack_basic_example"] =
	self["webpackChunkrspack_basic_example"] || []).push([
	[
		"node_modules_pnpm_three_0_169_0_node_modules_three_examples_jsm_postprocessing_RenderPass_js-_c8970"
	],
	{
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js":
			/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js ***!
  \*****************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.d(__webpack_exports__, {
					FullScreenQuad: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three/examples/jsm/postprocessing/RenderPass.js.FullScreenQuad"] */ FullScreenQuad,
					Pass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three/examples/jsm/postprocessing/RenderPass.js.Pass"] */ Pass
				});
				/* ESM import */ var three__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! three */ "webpack/sharing/consume/default/three/three"
					);

				class Pass {
					constructor() {
						this.isPass = true;

						// if set to true, the pass is processed by the composer
						this.enabled = true;

						// if set to true, the pass indicates to swap read and write buffer after rendering
						this.needsSwap = true;

						// if set to true, the pass clears its buffer before rendering
						this.clear = false;

						// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
						this.renderToScreen = false;
					}

					setSize(/* width, height */) {}

					render(/* renderer, writeBuffer, readBuffer, deltaTime, maskActive */) {
						console.error(
							"THREE.Pass: .render() must be implemented in derived pass."
						);
					}

					dispose() {}
				}

				// Helper for passes that need to fill the viewport with a single quad.

				const _camera =
					new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(
						-1,
						1,
						1,
						-1,
						0,
						1
					);

				// https://github.com/mrdoob/three.js/pull/21358

				class FullscreenTriangleGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry {
					constructor() {
						super();

						this.setAttribute(
							"position",
							new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(
								[-1, 3, 0, -1, -1, 0, 3, -1, 0],
								3
							)
						);
						this.setAttribute(
							"uv",
							new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(
								[0, 2, 0, 0, 2, 0],
								2
							)
						);
					}
				}

				const _geometry = new FullscreenTriangleGeometry();

				class FullScreenQuad {
					constructor(material) {
						this._mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(
							_geometry,
							material
						);
					}

					dispose() {
						this._mesh.geometry.dispose();
					}

					render(renderer) {
						renderer.render(this._mesh, _camera);
					}

					get material() {
						return this._mesh.material;
					}

					set material(value) {
						this._mesh.material = value;
					}
				}
			},
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/RenderPass.js":
			/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/RenderPass.js ***!
  \***********************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.r(__webpack_exports__);
				__webpack_require__.d(__webpack_exports__, {
					RenderPass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three/examples/jsm/postprocessing/RenderPass.js.RenderPass"] */ RenderPass
				});
				/* ESM import */ var three__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! three */ "webpack/sharing/consume/default/three/three"
					);
				/* ESM import */ var _Pass_js__WEBPACK_IMPORTED_MODULE_1__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ./Pass.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js"
					);

				class RenderPass extends _Pass_js__WEBPACK_IMPORTED_MODULE_1__.Pass {
					constructor(
						scene,
						camera,
						overrideMaterial = null,
						clearColor = null,
						clearAlpha = null
					) {
						super();

						this.scene = scene;
						this.camera = camera;

						this.overrideMaterial = overrideMaterial;

						this.clearColor = clearColor;
						this.clearAlpha = clearAlpha;

						this.clear = true;
						this.clearDepth = false;
						this.needsSwap = false;
						this._oldClearColor =
							new three__WEBPACK_IMPORTED_MODULE_0__.Color();
					}

					render(
						renderer,
						writeBuffer,
						readBuffer /*, deltaTime, maskActive */
					) {
						const oldAutoClear = renderer.autoClear;
						renderer.autoClear = false;

						let oldClearAlpha, oldOverrideMaterial;

						if (this.overrideMaterial !== null) {
							oldOverrideMaterial = this.scene.overrideMaterial;

							this.scene.overrideMaterial = this.overrideMaterial;
						}

						if (this.clearColor !== null) {
							renderer.getClearColor(this._oldClearColor);
							renderer.setClearColor(this.clearColor, renderer.getClearAlpha());
						}

						if (this.clearAlpha !== null) {
							oldClearAlpha = renderer.getClearAlpha();
							renderer.setClearAlpha(this.clearAlpha);
						}

						if (this.clearDepth == true) {
							renderer.clearDepth();
						}

						renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);

						if (this.clear === true) {
							// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
							renderer.clear(
								renderer.autoClearColor,
								renderer.autoClearDepth,
								renderer.autoClearStencil
							);
						}

						renderer.render(this.scene, this.camera);

						// restore

						if (this.clearColor !== null) {
							renderer.setClearColor(this._oldClearColor);
						}

						if (this.clearAlpha !== null) {
							renderer.setClearAlpha(oldClearAlpha);
						}

						if (this.overrideMaterial !== null) {
							this.scene.overrideMaterial = oldOverrideMaterial;
						}

						renderer.autoClear = oldAutoClear;
					}
				}
			}
	}
]);
