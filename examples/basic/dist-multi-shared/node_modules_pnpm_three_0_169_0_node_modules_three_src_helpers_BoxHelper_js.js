"use strict";
(self["webpackChunkrspack_basic_example"] =
	self["webpackChunkrspack_basic_example"] || []).push([
	[
		"node_modules_pnpm_three_0_169_0_node_modules_three_src_helpers_BoxHelper_js"
	],
	{
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/helpers/BoxHelper.js":
			/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/helpers/BoxHelper.js ***!
  \******************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.r(__webpack_exports__);
				__webpack_require__.d(__webpack_exports__, {
					BoxHelper: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three/src/helpers/BoxHelper.js.BoxHelper"] */ BoxHelper
				});
				/* ESM import */ var _math_Box3_js__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../math/Box3.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/math/Box3.js"
					);
				/* ESM import */ var _objects_LineSegments_js__WEBPACK_IMPORTED_MODULE_1__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../objects/LineSegments.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/objects/LineSegments.js"
					);
				/* ESM import */ var _materials_LineBasicMaterial_js__WEBPACK_IMPORTED_MODULE_4__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../materials/LineBasicMaterial.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/materials/LineBasicMaterial.js"
					);
				/* ESM import */ var _core_BufferAttribute_js__WEBPACK_IMPORTED_MODULE_3__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../core/BufferAttribute.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/core/BufferAttribute.js"
					);
				/* ESM import */ var _core_BufferGeometry_js__WEBPACK_IMPORTED_MODULE_2__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../core/BufferGeometry.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/src/core/BufferGeometry.js"
					);

				const _box =
					/*@__PURE__*/ new _math_Box3_js__WEBPACK_IMPORTED_MODULE_0__.Box3();

				class BoxHelper extends _objects_LineSegments_js__WEBPACK_IMPORTED_MODULE_1__.LineSegments {
					constructor(object, color = 0xffff00) {
						const indices = new Uint16Array([
							0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6,
							3, 7
						]);
						const positions = new Float32Array(8 * 3);

						const geometry =
							new _core_BufferGeometry_js__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();
						geometry.setIndex(
							new _core_BufferAttribute_js__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(
								indices,
								1
							)
						);
						geometry.setAttribute(
							"position",
							new _core_BufferAttribute_js__WEBPACK_IMPORTED_MODULE_3__.BufferAttribute(
								positions,
								3
							)
						);

						super(
							geometry,
							new _materials_LineBasicMaterial_js__WEBPACK_IMPORTED_MODULE_4__.LineBasicMaterial(
								{ color: color, toneMapped: false }
							)
						);

						this.object = object;
						this.type = "BoxHelper";

						this.matrixAutoUpdate = false;

						this.update();
					}

					update(object) {
						if (object !== undefined) {
							console.warn(
								"THREE.BoxHelper: .update() has no longer arguments."
							);
						}

						if (this.object !== undefined) {
							_box.setFromObject(this.object);
						}

						if (_box.isEmpty()) return;

						const min = _box.min;
						const max = _box.max;

						/*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

						const position = this.geometry.attributes.position;
						const array = position.array;

						array[0] = max.x;
						array[1] = max.y;
						array[2] = max.z;
						array[3] = min.x;
						array[4] = max.y;
						array[5] = max.z;
						array[6] = min.x;
						array[7] = min.y;
						array[8] = max.z;
						array[9] = max.x;
						array[10] = min.y;
						array[11] = max.z;
						array[12] = max.x;
						array[13] = max.y;
						array[14] = min.z;
						array[15] = min.x;
						array[16] = max.y;
						array[17] = min.z;
						array[18] = min.x;
						array[19] = min.y;
						array[20] = min.z;
						array[21] = max.x;
						array[22] = min.y;
						array[23] = min.z;

						position.needsUpdate = true;

						this.geometry.computeBoundingSphere();
					}

					setFromObject(object) {
						this.object = object;
						this.update();

						return this;
					}

					copy(source, recursive) {
						super.copy(source, recursive);

						this.object = source.object;

						return this;
					}

					dispose() {
						this.geometry.dispose();
						this.material.dispose();
					}
				}
			}
	}
]);
