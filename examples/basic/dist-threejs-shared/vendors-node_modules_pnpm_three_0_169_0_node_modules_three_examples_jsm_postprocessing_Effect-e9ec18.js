"use strict";
(self["webpackChunkrspack_basic_example"] =
	self["webpackChunkrspack_basic_example"] || []).push([
	[
		"vendors-node_modules_pnpm_three_0_169_0_node_modules_three_examples_jsm_postprocessing_Effect-e9ec18"
	],
	{
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/EffectComposer.js":
			/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/EffectComposer.js ***!
  \***************************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.r(__webpack_exports__);
				__webpack_require__.d(__webpack_exports__, {
					EffectComposer: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-effect-composer.EffectComposer"] */ EffectComposer
				});
				/* ESM import */ var three__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! three */ "webpack/sharing/consume/default/three/three"
					);
				/* ESM import */ var _shaders_CopyShader_js__WEBPACK_IMPORTED_MODULE_2__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ../shaders/CopyShader.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/shaders/CopyShader.js"
					);
				/* ESM import */ var _ShaderPass_js__WEBPACK_IMPORTED_MODULE_1__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ./ShaderPass.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/ShaderPass.js"
					);
				/* ESM import */ var _MaskPass_js__WEBPACK_IMPORTED_MODULE_3__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ./MaskPass.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/MaskPass.js"
					);

				class EffectComposer {
					constructor(renderer, renderTarget) {
						this.renderer = renderer;

						this._pixelRatio = renderer.getPixelRatio();

						if (renderTarget === undefined) {
							const size = renderer.getSize(
								new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
							);
							this._width = size.width;
							this._height = size.height;

							renderTarget =
								new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(
									this._width * this._pixelRatio,
									this._height * this._pixelRatio,
									{ type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType }
								);
							renderTarget.texture.name = "EffectComposer.rt1";
						} else {
							this._width = renderTarget.width;
							this._height = renderTarget.height;
						}

						this.renderTarget1 = renderTarget;
						this.renderTarget2 = renderTarget.clone();
						this.renderTarget2.texture.name = "EffectComposer.rt2";

						this.writeBuffer = this.renderTarget1;
						this.readBuffer = this.renderTarget2;

						this.renderToScreen = true;

						this.passes = [];

						this.copyPass =
							new _ShaderPass_js__WEBPACK_IMPORTED_MODULE_1__.ShaderPass(
								_shaders_CopyShader_js__WEBPACK_IMPORTED_MODULE_2__.CopyShader
							);
						this.copyPass.material.blending =
							three__WEBPACK_IMPORTED_MODULE_0__.NoBlending;

						this.clock = new three__WEBPACK_IMPORTED_MODULE_0__.Clock();
					}

					swapBuffers() {
						const tmp = this.readBuffer;
						this.readBuffer = this.writeBuffer;
						this.writeBuffer = tmp;
					}

					addPass(pass) {
						this.passes.push(pass);
						pass.setSize(
							this._width * this._pixelRatio,
							this._height * this._pixelRatio
						);
					}

					insertPass(pass, index) {
						this.passes.splice(index, 0, pass);
						pass.setSize(
							this._width * this._pixelRatio,
							this._height * this._pixelRatio
						);
					}

					removePass(pass) {
						const index = this.passes.indexOf(pass);

						if (index !== -1) {
							this.passes.splice(index, 1);
						}
					}

					isLastEnabledPass(passIndex) {
						for (let i = passIndex + 1; i < this.passes.length; i++) {
							if (this.passes[i].enabled) {
								return false;
							}
						}

						return true;
					}

					render(deltaTime) {
						// deltaTime value is in seconds

						if (deltaTime === undefined) {
							deltaTime = this.clock.getDelta();
						}

						const currentRenderTarget = this.renderer.getRenderTarget();

						let maskActive = false;

						for (let i = 0, il = this.passes.length; i < il; i++) {
							const pass = this.passes[i];

							if (pass.enabled === false) continue;

							pass.renderToScreen =
								this.renderToScreen && this.isLastEnabledPass(i);
							pass.render(
								this.renderer,
								this.writeBuffer,
								this.readBuffer,
								deltaTime,
								maskActive
							);

							if (pass.needsSwap) {
								if (maskActive) {
									const context = this.renderer.getContext();
									const stencil = this.renderer.state.buffers.stencil;

									//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );
									stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);

									this.copyPass.render(
										this.renderer,
										this.writeBuffer,
										this.readBuffer,
										deltaTime
									);

									//context.stencilFunc( context.EQUAL, 1, 0xffffffff );
									stencil.setFunc(context.EQUAL, 1, 0xffffffff);
								}

								this.swapBuffers();
							}

							if (
								_MaskPass_js__WEBPACK_IMPORTED_MODULE_3__.MaskPass !== undefined
							) {
								if (
									pass instanceof
									_MaskPass_js__WEBPACK_IMPORTED_MODULE_3__.MaskPass
								) {
									maskActive = true;
								} else if (
									pass instanceof
									_MaskPass_js__WEBPACK_IMPORTED_MODULE_3__.ClearMaskPass
								) {
									maskActive = false;
								}
							}
						}

						this.renderer.setRenderTarget(currentRenderTarget);
					}

					reset(renderTarget) {
						if (renderTarget === undefined) {
							const size = this.renderer.getSize(
								new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()
							);
							this._pixelRatio = this.renderer.getPixelRatio();
							this._width = size.width;
							this._height = size.height;

							renderTarget = this.renderTarget1.clone();
							renderTarget.setSize(
								this._width * this._pixelRatio,
								this._height * this._pixelRatio
							);
						}

						this.renderTarget1.dispose();
						this.renderTarget2.dispose();
						this.renderTarget1 = renderTarget;
						this.renderTarget2 = renderTarget.clone();

						this.writeBuffer = this.renderTarget1;
						this.readBuffer = this.renderTarget2;
					}

					setSize(width, height) {
						this._width = width;
						this._height = height;

						const effectiveWidth = this._width * this._pixelRatio;
						const effectiveHeight = this._height * this._pixelRatio;

						this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
						this.renderTarget2.setSize(effectiveWidth, effectiveHeight);

						for (let i = 0; i < this.passes.length; i++) {
							this.passes[i].setSize(effectiveWidth, effectiveHeight);
						}
					}

					setPixelRatio(pixelRatio) {
						this._pixelRatio = pixelRatio;

						this.setSize(this._width, this._height);
					}

					dispose() {
						this.renderTarget1.dispose();
						this.renderTarget2.dispose();

						this.copyPass.dispose();
					}
				}
			},
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/MaskPass.js":
			/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/MaskPass.js ***!
  \*********************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.d(__webpack_exports__, {
					ClearMaskPass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-effect-composer.ClearMaskPass"] */ ClearMaskPass,
					MaskPass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-effect-composer.MaskPass"] */ MaskPass
				});
				/* ESM import */ var _Pass_js__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ./Pass.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js"
					);

				class MaskPass extends _Pass_js__WEBPACK_IMPORTED_MODULE_0__.Pass {
					constructor(scene, camera) {
						super();

						this.scene = scene;
						this.camera = camera;

						this.clear = true;
						this.needsSwap = false;

						this.inverse = false;
					}

					render(
						renderer,
						writeBuffer,
						readBuffer /*, deltaTime, maskActive */
					) {
						const context = renderer.getContext();
						const state = renderer.state;

						// don't update color or depth

						state.buffers.color.setMask(false);
						state.buffers.depth.setMask(false);

						// lock buffers

						state.buffers.color.setLocked(true);
						state.buffers.depth.setLocked(true);

						// set up stencil

						let writeValue, clearValue;

						if (this.inverse) {
							writeValue = 0;
							clearValue = 1;
						} else {
							writeValue = 1;
							clearValue = 0;
						}

						state.buffers.stencil.setTest(true);
						state.buffers.stencil.setOp(
							context.REPLACE,
							context.REPLACE,
							context.REPLACE
						);
						state.buffers.stencil.setFunc(
							context.ALWAYS,
							writeValue,
							0xffffffff
						);
						state.buffers.stencil.setClear(clearValue);
						state.buffers.stencil.setLocked(true);

						// draw into the stencil buffer

						renderer.setRenderTarget(readBuffer);
						if (this.clear) renderer.clear();
						renderer.render(this.scene, this.camera);

						renderer.setRenderTarget(writeBuffer);
						if (this.clear) renderer.clear();
						renderer.render(this.scene, this.camera);

						// unlock color and depth buffer and make them writable for subsequent rendering/clearing

						state.buffers.color.setLocked(false);
						state.buffers.depth.setLocked(false);

						state.buffers.color.setMask(true);
						state.buffers.depth.setMask(true);

						// only render where stencil is set to 1

						state.buffers.stencil.setLocked(false);
						state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1
						state.buffers.stencil.setOp(
							context.KEEP,
							context.KEEP,
							context.KEEP
						);
						state.buffers.stencil.setLocked(true);
					}
				}

				class ClearMaskPass extends _Pass_js__WEBPACK_IMPORTED_MODULE_0__.Pass {
					constructor() {
						super();

						this.needsSwap = false;
					}

					render(
						renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */
					) {
						renderer.state.buffers.stencil.setLocked(false);
						renderer.state.buffers.stencil.setTest(false);
					}
				}
			},
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js":
			/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js ***!
  \*****************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.d(__webpack_exports__, {
					FullScreenQuad: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-render-pass.FullScreenQuad"] */ FullScreenQuad,
					Pass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-render-pass.Pass"] */ Pass
				});
				/* ESM import */ var three__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! three */ "webpack/sharing/consume/default/three/three"
					);

				class Pass {
					constructor() {
						this.isPass = true;

						// if set to true, the pass is processed by the composer
						this.enabled = true;

						// if set to true, the pass indicates to swap read and write buffer after rendering
						this.needsSwap = true;

						// if set to true, the pass clears its buffer before rendering
						this.clear = false;

						// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
						this.renderToScreen = false;
					}

					setSize(/* width, height */) {}

					render(/* renderer, writeBuffer, readBuffer, deltaTime, maskActive */) {
						console.error(
							"THREE.Pass: .render() must be implemented in derived pass."
						);
					}

					dispose() {}
				}

				// Helper for passes that need to fill the viewport with a single quad.

				const _camera =
					new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera(
						-1,
						1,
						1,
						-1,
						0,
						1
					);

				// https://github.com/mrdoob/three.js/pull/21358

				class FullscreenTriangleGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry {
					constructor() {
						super();

						this.setAttribute(
							"position",
							new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(
								[-1, 3, 0, -1, -1, 0, 3, -1, 0],
								3
							)
						);
						this.setAttribute(
							"uv",
							new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(
								[0, 2, 0, 0, 2, 0],
								2
							)
						);
					}
				}

				const _geometry = new FullscreenTriangleGeometry();

				class FullScreenQuad {
					constructor(material) {
						this._mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(
							_geometry,
							material
						);
					}

					dispose() {
						this._mesh.geometry.dispose();
					}

					render(renderer) {
						renderer.render(this._mesh, _camera);
					}

					get material() {
						return this._mesh.material;
					}

					set material(value) {
						this._mesh.material = value;
					}
				}
			},
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/ShaderPass.js":
			/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/ShaderPass.js ***!
  \***********************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.d(__webpack_exports__, {
					ShaderPass: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-effect-composer.ShaderPass"] */ ShaderPass
				});
				/* ESM import */ var three__WEBPACK_IMPORTED_MODULE_0__ =
					/* #__PURE__ */ __webpack_require__(
						/*! three */ "webpack/sharing/consume/default/three/three"
					);
				/* ESM import */ var _Pass_js__WEBPACK_IMPORTED_MODULE_1__ =
					/* #__PURE__ */ __webpack_require__(
						/*! ./Pass.js */ "../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/postprocessing/Pass.js"
					);

				class ShaderPass extends _Pass_js__WEBPACK_IMPORTED_MODULE_1__.Pass {
					constructor(shader, textureID) {
						super();

						this.textureID = textureID !== undefined ? textureID : "tDiffuse";

						if (
							shader instanceof
							three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial
						) {
							this.uniforms = shader.uniforms;

							this.material = shader;
						} else if (shader) {
							this.uniforms =
								three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone(
									shader.uniforms
								);

							this.material =
								new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({
									name: shader.name !== undefined ? shader.name : "unspecified",
									defines: Object.assign({}, shader.defines),
									uniforms: this.uniforms,
									vertexShader: shader.vertexShader,
									fragmentShader: shader.fragmentShader
								});
						}

						this.fsQuad =
							new _Pass_js__WEBPACK_IMPORTED_MODULE_1__.FullScreenQuad(
								this.material
							);
					}

					render(
						renderer,
						writeBuffer,
						readBuffer /*, deltaTime, maskActive */
					) {
						if (this.uniforms[this.textureID]) {
							this.uniforms[this.textureID].value = readBuffer.texture;
						}

						this.fsQuad.material = this.material;

						if (this.renderToScreen) {
							renderer.setRenderTarget(null);
							this.fsQuad.render(renderer);
						} else {
							renderer.setRenderTarget(writeBuffer);
							// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
							if (this.clear)
								renderer.clear(
									renderer.autoClearColor,
									renderer.autoClearDepth,
									renderer.autoClearStencil
								);
							this.fsQuad.render(renderer);
						}
					}

					dispose() {
						this.material.dispose();

						this.fsQuad.dispose();
					}
				}
			},
		"../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/shaders/CopyShader.js":
			/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/three@0.169.0/node_modules/three/examples/jsm/shaders/CopyShader.js ***!
  \****************************************************************************************************/
			function (
				__unused_webpack___webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				__webpack_require__.d(__webpack_exports__, {
					CopyShader: (/* @common:endif */) =>
						/* @common:if [condition="treeShake.three-bloom-pass.CopyShader"] */ CopyShader
				});
				/**
				 * Full-screen textured quad shader
				 */

				const CopyShader = {
					name: "CopyShader",

					uniforms: {
						tDiffuse: { value: null },
						opacity: { value: 1.0 }
					},

					vertexShader: /* glsl */ `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,

					fragmentShader: /* glsl */ `

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`
				};
			}
	}
]);
